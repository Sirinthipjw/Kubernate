
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model patient
 * 
 */
export type patient = $Result.DefaultSelection<Prisma.$patientPayload>
/**
 * Model amphure
 * 
 */
export type amphure = $Result.DefaultSelection<Prisma.$amphurePayload>
/**
 * Model province
 * 
 */
export type province = $Result.DefaultSelection<Prisma.$provincePayload>
/**
 * Model tambom
 * 
 */
export type tambom = $Result.DefaultSelection<Prisma.$tambomPayload>
/**
 * Model foot
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type foot = $Result.DefaultSelection<Prisma.$footPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Patients
 * const patients = await prisma.patient.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Patients
   * const patients = await prisma.patient.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.patient`: Exposes CRUD operations for the **patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.patientDelegate<ExtArgs>;

  /**
   * `prisma.amphure`: Exposes CRUD operations for the **amphure** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Amphures
    * const amphures = await prisma.amphure.findMany()
    * ```
    */
  get amphure(): Prisma.amphureDelegate<ExtArgs>;

  /**
   * `prisma.province`: Exposes CRUD operations for the **province** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Provinces
    * const provinces = await prisma.province.findMany()
    * ```
    */
  get province(): Prisma.provinceDelegate<ExtArgs>;

  /**
   * `prisma.tambom`: Exposes CRUD operations for the **tambom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tamboms
    * const tamboms = await prisma.tambom.findMany()
    * ```
    */
  get tambom(): Prisma.tambomDelegate<ExtArgs>;

  /**
   * `prisma.foot`: Exposes CRUD operations for the **foot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feet
    * const feet = await prisma.foot.findMany()
    * ```
    */
  get foot(): Prisma.footDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.16.1
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    patient: 'patient',
    amphure: 'amphure',
    province: 'province',
    tambom: 'tambom',
    foot: 'foot'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "patient" | "amphure" | "province" | "tambom" | "foot"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      patient: {
        payload: Prisma.$patientPayload<ExtArgs>
        fields: Prisma.patientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.patientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.patientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientPayload>
          }
          findFirst: {
            args: Prisma.patientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.patientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientPayload>
          }
          findMany: {
            args: Prisma.patientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientPayload>[]
          }
          create: {
            args: Prisma.patientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientPayload>
          }
          createMany: {
            args: Prisma.patientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.patientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientPayload>
          }
          update: {
            args: Prisma.patientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientPayload>
          }
          deleteMany: {
            args: Prisma.patientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.patientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.patientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.patientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.patientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      amphure: {
        payload: Prisma.$amphurePayload<ExtArgs>
        fields: Prisma.amphureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.amphureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$amphurePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.amphureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$amphurePayload>
          }
          findFirst: {
            args: Prisma.amphureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$amphurePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.amphureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$amphurePayload>
          }
          findMany: {
            args: Prisma.amphureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$amphurePayload>[]
          }
          create: {
            args: Prisma.amphureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$amphurePayload>
          }
          createMany: {
            args: Prisma.amphureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.amphureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$amphurePayload>
          }
          update: {
            args: Prisma.amphureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$amphurePayload>
          }
          deleteMany: {
            args: Prisma.amphureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.amphureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.amphureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$amphurePayload>
          }
          aggregate: {
            args: Prisma.AmphureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAmphure>
          }
          groupBy: {
            args: Prisma.amphureGroupByArgs<ExtArgs>
            result: $Utils.Optional<AmphureGroupByOutputType>[]
          }
          count: {
            args: Prisma.amphureCountArgs<ExtArgs>
            result: $Utils.Optional<AmphureCountAggregateOutputType> | number
          }
        }
      }
      province: {
        payload: Prisma.$provincePayload<ExtArgs>
        fields: Prisma.provinceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.provinceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$provincePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.provinceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$provincePayload>
          }
          findFirst: {
            args: Prisma.provinceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$provincePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.provinceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$provincePayload>
          }
          findMany: {
            args: Prisma.provinceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$provincePayload>[]
          }
          create: {
            args: Prisma.provinceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$provincePayload>
          }
          createMany: {
            args: Prisma.provinceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.provinceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$provincePayload>
          }
          update: {
            args: Prisma.provinceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$provincePayload>
          }
          deleteMany: {
            args: Prisma.provinceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.provinceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.provinceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$provincePayload>
          }
          aggregate: {
            args: Prisma.ProvinceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProvince>
          }
          groupBy: {
            args: Prisma.provinceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProvinceGroupByOutputType>[]
          }
          count: {
            args: Prisma.provinceCountArgs<ExtArgs>
            result: $Utils.Optional<ProvinceCountAggregateOutputType> | number
          }
        }
      }
      tambom: {
        payload: Prisma.$tambomPayload<ExtArgs>
        fields: Prisma.tambomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tambomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tambomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tambomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tambomPayload>
          }
          findFirst: {
            args: Prisma.tambomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tambomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tambomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tambomPayload>
          }
          findMany: {
            args: Prisma.tambomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tambomPayload>[]
          }
          create: {
            args: Prisma.tambomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tambomPayload>
          }
          createMany: {
            args: Prisma.tambomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tambomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tambomPayload>
          }
          update: {
            args: Prisma.tambomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tambomPayload>
          }
          deleteMany: {
            args: Prisma.tambomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tambomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tambomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tambomPayload>
          }
          aggregate: {
            args: Prisma.TambomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTambom>
          }
          groupBy: {
            args: Prisma.tambomGroupByArgs<ExtArgs>
            result: $Utils.Optional<TambomGroupByOutputType>[]
          }
          count: {
            args: Prisma.tambomCountArgs<ExtArgs>
            result: $Utils.Optional<TambomCountAggregateOutputType> | number
          }
        }
      }
      foot: {
        payload: Prisma.$footPayload<ExtArgs>
        fields: Prisma.footFieldRefs
        operations: {
          findUnique: {
            args: Prisma.footFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$footPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.footFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$footPayload>
          }
          findFirst: {
            args: Prisma.footFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$footPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.footFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$footPayload>
          }
          findMany: {
            args: Prisma.footFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$footPayload>[]
          }
          create: {
            args: Prisma.footCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$footPayload>
          }
          createMany: {
            args: Prisma.footCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.footDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$footPayload>
          }
          update: {
            args: Prisma.footUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$footPayload>
          }
          deleteMany: {
            args: Prisma.footDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.footUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.footUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$footPayload>
          }
          aggregate: {
            args: Prisma.FootAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoot>
          }
          groupBy: {
            args: Prisma.footGroupByArgs<ExtArgs>
            result: $Utils.Optional<FootGroupByOutputType>[]
          }
          count: {
            args: Prisma.footCountArgs<ExtArgs>
            result: $Utils.Optional<FootCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    foot: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foot?: boolean | PatientCountOutputTypeCountFootArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountFootArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: footWhereInput
  }


  /**
   * Count Type AmphureCountOutputType
   */

  export type AmphureCountOutputType = {
    tambom: number
  }

  export type AmphureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tambom?: boolean | AmphureCountOutputTypeCountTambomArgs
  }

  // Custom InputTypes
  /**
   * AmphureCountOutputType without action
   */
  export type AmphureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmphureCountOutputType
     */
    select?: AmphureCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AmphureCountOutputType without action
   */
  export type AmphureCountOutputTypeCountTambomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tambomWhereInput
  }


  /**
   * Count Type ProvinceCountOutputType
   */

  export type ProvinceCountOutputType = {
    amphure: number
  }

  export type ProvinceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    amphure?: boolean | ProvinceCountOutputTypeCountAmphureArgs
  }

  // Custom InputTypes
  /**
   * ProvinceCountOutputType without action
   */
  export type ProvinceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProvinceCountOutputType
     */
    select?: ProvinceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProvinceCountOutputType without action
   */
  export type ProvinceCountOutputTypeCountAmphureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: amphureWhereInput
  }


  /**
   * Count Type TambomCountOutputType
   */

  export type TambomCountOutputType = {
    patient: number
  }

  export type TambomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | TambomCountOutputTypeCountPatientArgs
  }

  // Custom InputTypes
  /**
   * TambomCountOutputType without action
   */
  export type TambomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TambomCountOutputType
     */
    select?: TambomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TambomCountOutputType without action
   */
  export type TambomCountOutputTypeCountPatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: patientWhereInput
  }


  /**
   * Models
   */

  /**
   * Model patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    patient_id: number | null
    age: number | null
    weight: number | null
    height: number | null
    tamboms_tamboms_id: number | null
  }

  export type PatientSumAggregateOutputType = {
    patient_id: number | null
    age: number | null
    weight: number | null
    height: number | null
    tamboms_tamboms_id: number | null
  }

  export type PatientMinAggregateOutputType = {
    patient_id: number | null
    id_card: string | null
    first_name: string | null
    last_name: string | null
    age: number | null
    gender: string | null
    weight: number | null
    height: number | null
    disease: string | null
    id_home: string | null
    village_name: string | null
    village_number: string | null
    tel: string | null
    email: string | null
    created_at: Date | null
    updated_at: Date | null
    tamboms_tamboms_id: number | null
  }

  export type PatientMaxAggregateOutputType = {
    patient_id: number | null
    id_card: string | null
    first_name: string | null
    last_name: string | null
    age: number | null
    gender: string | null
    weight: number | null
    height: number | null
    disease: string | null
    id_home: string | null
    village_name: string | null
    village_number: string | null
    tel: string | null
    email: string | null
    created_at: Date | null
    updated_at: Date | null
    tamboms_tamboms_id: number | null
  }

  export type PatientCountAggregateOutputType = {
    patient_id: number
    id_card: number
    first_name: number
    last_name: number
    age: number
    gender: number
    weight: number
    height: number
    disease: number
    id_home: number
    village_name: number
    village_number: number
    tel: number
    email: number
    created_at: number
    updated_at: number
    tamboms_tamboms_id: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    patient_id?: true
    age?: true
    weight?: true
    height?: true
    tamboms_tamboms_id?: true
  }

  export type PatientSumAggregateInputType = {
    patient_id?: true
    age?: true
    weight?: true
    height?: true
    tamboms_tamboms_id?: true
  }

  export type PatientMinAggregateInputType = {
    patient_id?: true
    id_card?: true
    first_name?: true
    last_name?: true
    age?: true
    gender?: true
    weight?: true
    height?: true
    disease?: true
    id_home?: true
    village_name?: true
    village_number?: true
    tel?: true
    email?: true
    created_at?: true
    updated_at?: true
    tamboms_tamboms_id?: true
  }

  export type PatientMaxAggregateInputType = {
    patient_id?: true
    id_card?: true
    first_name?: true
    last_name?: true
    age?: true
    gender?: true
    weight?: true
    height?: true
    disease?: true
    id_home?: true
    village_name?: true
    village_number?: true
    tel?: true
    email?: true
    created_at?: true
    updated_at?: true
    tamboms_tamboms_id?: true
  }

  export type PatientCountAggregateInputType = {
    patient_id?: true
    id_card?: true
    first_name?: true
    last_name?: true
    age?: true
    gender?: true
    weight?: true
    height?: true
    disease?: true
    id_home?: true
    village_name?: true
    village_number?: true
    tel?: true
    email?: true
    created_at?: true
    updated_at?: true
    tamboms_tamboms_id?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which patient to aggregate.
     */
    where?: patientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: patientOrderByWithRelationInput | patientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: patientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type patientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: patientWhereInput
    orderBy?: patientOrderByWithAggregationInput | patientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: patientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    patient_id: number
    id_card: string | null
    first_name: string | null
    last_name: string | null
    age: number | null
    gender: string | null
    weight: number | null
    height: number | null
    disease: string | null
    id_home: string | null
    village_name: string | null
    village_number: string | null
    tel: string | null
    email: string | null
    created_at: Date | null
    updated_at: Date | null
    tamboms_tamboms_id: number | null
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends patientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type patientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    patient_id?: boolean
    id_card?: boolean
    first_name?: boolean
    last_name?: boolean
    age?: boolean
    gender?: boolean
    weight?: boolean
    height?: boolean
    disease?: boolean
    id_home?: boolean
    village_name?: boolean
    village_number?: boolean
    tel?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
    tamboms_tamboms_id?: boolean
    foot?: boolean | patient$footArgs<ExtArgs>
    tamboms?: boolean | patient$tambomsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>


  export type patientSelectScalar = {
    patient_id?: boolean
    id_card?: boolean
    first_name?: boolean
    last_name?: boolean
    age?: boolean
    gender?: boolean
    weight?: boolean
    height?: boolean
    disease?: boolean
    id_home?: boolean
    village_name?: boolean
    village_number?: boolean
    tel?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
    tamboms_tamboms_id?: boolean
  }

  export type patientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foot?: boolean | patient$footArgs<ExtArgs>
    tamboms?: boolean | patient$tambomsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $patientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "patient"
    objects: {
      foot: Prisma.$footPayload<ExtArgs>[]
      tamboms: Prisma.$tambomPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      patient_id: number
      id_card: string | null
      first_name: string | null
      last_name: string | null
      age: number | null
      gender: string | null
      weight: number | null
      height: number | null
      disease: string | null
      id_home: string | null
      village_name: string | null
      village_number: string | null
      tel: string | null
      email: string | null
      created_at: Date | null
      updated_at: Date | null
      tamboms_tamboms_id: number | null
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type patientGetPayload<S extends boolean | null | undefined | patientDefaultArgs> = $Result.GetResult<Prisma.$patientPayload, S>

  type patientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<patientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface patientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['patient'], meta: { name: 'patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {patientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends patientFindUniqueArgs>(args: SelectSubset<T, patientFindUniqueArgs<ExtArgs>>): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {patientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends patientFindUniqueOrThrowArgs>(args: SelectSubset<T, patientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends patientFindFirstArgs>(args?: SelectSubset<T, patientFindFirstArgs<ExtArgs>>): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends patientFindFirstOrThrowArgs>(args?: SelectSubset<T, patientFindFirstOrThrowArgs<ExtArgs>>): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `patient_id`
     * const patientWithPatient_idOnly = await prisma.patient.findMany({ select: { patient_id: true } })
     * 
     */
    findMany<T extends patientFindManyArgs>(args?: SelectSubset<T, patientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Patient.
     * @param {patientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends patientCreateArgs>(args: SelectSubset<T, patientCreateArgs<ExtArgs>>): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Patients.
     * @param {patientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends patientCreateManyArgs>(args?: SelectSubset<T, patientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Patient.
     * @param {patientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends patientDeleteArgs>(args: SelectSubset<T, patientDeleteArgs<ExtArgs>>): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Patient.
     * @param {patientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends patientUpdateArgs>(args: SelectSubset<T, patientUpdateArgs<ExtArgs>>): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Patients.
     * @param {patientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends patientDeleteManyArgs>(args?: SelectSubset<T, patientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends patientUpdateManyArgs>(args: SelectSubset<T, patientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {patientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends patientUpsertArgs>(args: SelectSubset<T, patientUpsertArgs<ExtArgs>>): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends patientCountArgs>(
      args?: Subset<T, patientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends patientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: patientGroupByArgs['orderBy'] }
        : { orderBy?: patientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, patientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the patient model
   */
  readonly fields: patientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__patientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foot<T extends patient$footArgs<ExtArgs> = {}>(args?: Subset<T, patient$footArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$footPayload<ExtArgs>, T, "findMany"> | Null>
    tamboms<T extends patient$tambomsArgs<ExtArgs> = {}>(args?: Subset<T, patient$tambomsArgs<ExtArgs>>): Prisma__tambomClient<$Result.GetResult<Prisma.$tambomPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the patient model
   */ 
  interface patientFieldRefs {
    readonly patient_id: FieldRef<"patient", 'Int'>
    readonly id_card: FieldRef<"patient", 'String'>
    readonly first_name: FieldRef<"patient", 'String'>
    readonly last_name: FieldRef<"patient", 'String'>
    readonly age: FieldRef<"patient", 'Int'>
    readonly gender: FieldRef<"patient", 'String'>
    readonly weight: FieldRef<"patient", 'Float'>
    readonly height: FieldRef<"patient", 'Float'>
    readonly disease: FieldRef<"patient", 'String'>
    readonly id_home: FieldRef<"patient", 'String'>
    readonly village_name: FieldRef<"patient", 'String'>
    readonly village_number: FieldRef<"patient", 'String'>
    readonly tel: FieldRef<"patient", 'String'>
    readonly email: FieldRef<"patient", 'String'>
    readonly created_at: FieldRef<"patient", 'DateTime'>
    readonly updated_at: FieldRef<"patient", 'DateTime'>
    readonly tamboms_tamboms_id: FieldRef<"patient", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * patient findUnique
   */
  export type patientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * Filter, which patient to fetch.
     */
    where: patientWhereUniqueInput
  }

  /**
   * patient findUniqueOrThrow
   */
  export type patientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * Filter, which patient to fetch.
     */
    where: patientWhereUniqueInput
  }

  /**
   * patient findFirst
   */
  export type patientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * Filter, which patient to fetch.
     */
    where?: patientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: patientOrderByWithRelationInput | patientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for patients.
     */
    cursor?: patientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * patient findFirstOrThrow
   */
  export type patientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * Filter, which patient to fetch.
     */
    where?: patientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: patientOrderByWithRelationInput | patientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for patients.
     */
    cursor?: patientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * patient findMany
   */
  export type patientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * Filter, which patients to fetch.
     */
    where?: patientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: patientOrderByWithRelationInput | patientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing patients.
     */
    cursor?: patientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * patient create
   */
  export type patientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * The data needed to create a patient.
     */
    data?: XOR<patientCreateInput, patientUncheckedCreateInput>
  }

  /**
   * patient createMany
   */
  export type patientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many patients.
     */
    data: patientCreateManyInput | patientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * patient update
   */
  export type patientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * The data needed to update a patient.
     */
    data: XOR<patientUpdateInput, patientUncheckedUpdateInput>
    /**
     * Choose, which patient to update.
     */
    where: patientWhereUniqueInput
  }

  /**
   * patient updateMany
   */
  export type patientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update patients.
     */
    data: XOR<patientUpdateManyMutationInput, patientUncheckedUpdateManyInput>
    /**
     * Filter which patients to update
     */
    where?: patientWhereInput
  }

  /**
   * patient upsert
   */
  export type patientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * The filter to search for the patient to update in case it exists.
     */
    where: patientWhereUniqueInput
    /**
     * In case the patient found by the `where` argument doesn't exist, create a new patient with this data.
     */
    create: XOR<patientCreateInput, patientUncheckedCreateInput>
    /**
     * In case the patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<patientUpdateInput, patientUncheckedUpdateInput>
  }

  /**
   * patient delete
   */
  export type patientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * Filter which patient to delete.
     */
    where: patientWhereUniqueInput
  }

  /**
   * patient deleteMany
   */
  export type patientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which patients to delete
     */
    where?: patientWhereInput
  }

  /**
   * patient.foot
   */
  export type patient$footArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the foot
     */
    select?: footSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: footInclude<ExtArgs> | null
    where?: footWhereInput
    orderBy?: footOrderByWithRelationInput | footOrderByWithRelationInput[]
    cursor?: footWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FootScalarFieldEnum | FootScalarFieldEnum[]
  }

  /**
   * patient.tamboms
   */
  export type patient$tambomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tambom
     */
    select?: tambomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tambomInclude<ExtArgs> | null
    where?: tambomWhereInput
  }

  /**
   * patient without action
   */
  export type patientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
  }


  /**
   * Model amphure
   */

  export type AggregateAmphure = {
    _count: AmphureCountAggregateOutputType | null
    _avg: AmphureAvgAggregateOutputType | null
    _sum: AmphureSumAggregateOutputType | null
    _min: AmphureMinAggregateOutputType | null
    _max: AmphureMaxAggregateOutputType | null
  }

  export type AmphureAvgAggregateOutputType = {
    amphures_id: number | null
    provinces_provinces_id: number | null
  }

  export type AmphureSumAggregateOutputType = {
    amphures_id: number | null
    provinces_provinces_id: number | null
  }

  export type AmphureMinAggregateOutputType = {
    amphures_id: number | null
    amphures: string | null
    provinces_provinces_id: number | null
  }

  export type AmphureMaxAggregateOutputType = {
    amphures_id: number | null
    amphures: string | null
    provinces_provinces_id: number | null
  }

  export type AmphureCountAggregateOutputType = {
    amphures_id: number
    amphures: number
    provinces_provinces_id: number
    _all: number
  }


  export type AmphureAvgAggregateInputType = {
    amphures_id?: true
    provinces_provinces_id?: true
  }

  export type AmphureSumAggregateInputType = {
    amphures_id?: true
    provinces_provinces_id?: true
  }

  export type AmphureMinAggregateInputType = {
    amphures_id?: true
    amphures?: true
    provinces_provinces_id?: true
  }

  export type AmphureMaxAggregateInputType = {
    amphures_id?: true
    amphures?: true
    provinces_provinces_id?: true
  }

  export type AmphureCountAggregateInputType = {
    amphures_id?: true
    amphures?: true
    provinces_provinces_id?: true
    _all?: true
  }

  export type AmphureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which amphure to aggregate.
     */
    where?: amphureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of amphures to fetch.
     */
    orderBy?: amphureOrderByWithRelationInput | amphureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: amphureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` amphures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` amphures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned amphures
    **/
    _count?: true | AmphureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AmphureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AmphureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AmphureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AmphureMaxAggregateInputType
  }

  export type GetAmphureAggregateType<T extends AmphureAggregateArgs> = {
        [P in keyof T & keyof AggregateAmphure]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAmphure[P]>
      : GetScalarType<T[P], AggregateAmphure[P]>
  }




  export type amphureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: amphureWhereInput
    orderBy?: amphureOrderByWithAggregationInput | amphureOrderByWithAggregationInput[]
    by: AmphureScalarFieldEnum[] | AmphureScalarFieldEnum
    having?: amphureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AmphureCountAggregateInputType | true
    _avg?: AmphureAvgAggregateInputType
    _sum?: AmphureSumAggregateInputType
    _min?: AmphureMinAggregateInputType
    _max?: AmphureMaxAggregateInputType
  }

  export type AmphureGroupByOutputType = {
    amphures_id: number
    amphures: string | null
    provinces_provinces_id: number
    _count: AmphureCountAggregateOutputType | null
    _avg: AmphureAvgAggregateOutputType | null
    _sum: AmphureSumAggregateOutputType | null
    _min: AmphureMinAggregateOutputType | null
    _max: AmphureMaxAggregateOutputType | null
  }

  type GetAmphureGroupByPayload<T extends amphureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AmphureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AmphureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AmphureGroupByOutputType[P]>
            : GetScalarType<T[P], AmphureGroupByOutputType[P]>
        }
      >
    >


  export type amphureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    amphures_id?: boolean
    amphures?: boolean
    provinces_provinces_id?: boolean
    province?: boolean | provinceDefaultArgs<ExtArgs>
    tambom?: boolean | amphure$tambomArgs<ExtArgs>
    _count?: boolean | AmphureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["amphure"]>


  export type amphureSelectScalar = {
    amphures_id?: boolean
    amphures?: boolean
    provinces_provinces_id?: boolean
  }

  export type amphureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    province?: boolean | provinceDefaultArgs<ExtArgs>
    tambom?: boolean | amphure$tambomArgs<ExtArgs>
    _count?: boolean | AmphureCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $amphurePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "amphure"
    objects: {
      province: Prisma.$provincePayload<ExtArgs>
      tambom: Prisma.$tambomPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      amphures_id: number
      amphures: string | null
      provinces_provinces_id: number
    }, ExtArgs["result"]["amphure"]>
    composites: {}
  }

  type amphureGetPayload<S extends boolean | null | undefined | amphureDefaultArgs> = $Result.GetResult<Prisma.$amphurePayload, S>

  type amphureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<amphureFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AmphureCountAggregateInputType | true
    }

  export interface amphureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['amphure'], meta: { name: 'amphure' } }
    /**
     * Find zero or one Amphure that matches the filter.
     * @param {amphureFindUniqueArgs} args - Arguments to find a Amphure
     * @example
     * // Get one Amphure
     * const amphure = await prisma.amphure.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends amphureFindUniqueArgs>(args: SelectSubset<T, amphureFindUniqueArgs<ExtArgs>>): Prisma__amphureClient<$Result.GetResult<Prisma.$amphurePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Amphure that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {amphureFindUniqueOrThrowArgs} args - Arguments to find a Amphure
     * @example
     * // Get one Amphure
     * const amphure = await prisma.amphure.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends amphureFindUniqueOrThrowArgs>(args: SelectSubset<T, amphureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__amphureClient<$Result.GetResult<Prisma.$amphurePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Amphure that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {amphureFindFirstArgs} args - Arguments to find a Amphure
     * @example
     * // Get one Amphure
     * const amphure = await prisma.amphure.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends amphureFindFirstArgs>(args?: SelectSubset<T, amphureFindFirstArgs<ExtArgs>>): Prisma__amphureClient<$Result.GetResult<Prisma.$amphurePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Amphure that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {amphureFindFirstOrThrowArgs} args - Arguments to find a Amphure
     * @example
     * // Get one Amphure
     * const amphure = await prisma.amphure.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends amphureFindFirstOrThrowArgs>(args?: SelectSubset<T, amphureFindFirstOrThrowArgs<ExtArgs>>): Prisma__amphureClient<$Result.GetResult<Prisma.$amphurePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Amphures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {amphureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Amphures
     * const amphures = await prisma.amphure.findMany()
     * 
     * // Get first 10 Amphures
     * const amphures = await prisma.amphure.findMany({ take: 10 })
     * 
     * // Only select the `amphures_id`
     * const amphureWithAmphures_idOnly = await prisma.amphure.findMany({ select: { amphures_id: true } })
     * 
     */
    findMany<T extends amphureFindManyArgs>(args?: SelectSubset<T, amphureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$amphurePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Amphure.
     * @param {amphureCreateArgs} args - Arguments to create a Amphure.
     * @example
     * // Create one Amphure
     * const Amphure = await prisma.amphure.create({
     *   data: {
     *     // ... data to create a Amphure
     *   }
     * })
     * 
     */
    create<T extends amphureCreateArgs>(args: SelectSubset<T, amphureCreateArgs<ExtArgs>>): Prisma__amphureClient<$Result.GetResult<Prisma.$amphurePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Amphures.
     * @param {amphureCreateManyArgs} args - Arguments to create many Amphures.
     * @example
     * // Create many Amphures
     * const amphure = await prisma.amphure.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends amphureCreateManyArgs>(args?: SelectSubset<T, amphureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Amphure.
     * @param {amphureDeleteArgs} args - Arguments to delete one Amphure.
     * @example
     * // Delete one Amphure
     * const Amphure = await prisma.amphure.delete({
     *   where: {
     *     // ... filter to delete one Amphure
     *   }
     * })
     * 
     */
    delete<T extends amphureDeleteArgs>(args: SelectSubset<T, amphureDeleteArgs<ExtArgs>>): Prisma__amphureClient<$Result.GetResult<Prisma.$amphurePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Amphure.
     * @param {amphureUpdateArgs} args - Arguments to update one Amphure.
     * @example
     * // Update one Amphure
     * const amphure = await prisma.amphure.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends amphureUpdateArgs>(args: SelectSubset<T, amphureUpdateArgs<ExtArgs>>): Prisma__amphureClient<$Result.GetResult<Prisma.$amphurePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Amphures.
     * @param {amphureDeleteManyArgs} args - Arguments to filter Amphures to delete.
     * @example
     * // Delete a few Amphures
     * const { count } = await prisma.amphure.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends amphureDeleteManyArgs>(args?: SelectSubset<T, amphureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Amphures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {amphureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Amphures
     * const amphure = await prisma.amphure.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends amphureUpdateManyArgs>(args: SelectSubset<T, amphureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Amphure.
     * @param {amphureUpsertArgs} args - Arguments to update or create a Amphure.
     * @example
     * // Update or create a Amphure
     * const amphure = await prisma.amphure.upsert({
     *   create: {
     *     // ... data to create a Amphure
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Amphure we want to update
     *   }
     * })
     */
    upsert<T extends amphureUpsertArgs>(args: SelectSubset<T, amphureUpsertArgs<ExtArgs>>): Prisma__amphureClient<$Result.GetResult<Prisma.$amphurePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Amphures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {amphureCountArgs} args - Arguments to filter Amphures to count.
     * @example
     * // Count the number of Amphures
     * const count = await prisma.amphure.count({
     *   where: {
     *     // ... the filter for the Amphures we want to count
     *   }
     * })
    **/
    count<T extends amphureCountArgs>(
      args?: Subset<T, amphureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AmphureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Amphure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmphureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AmphureAggregateArgs>(args: Subset<T, AmphureAggregateArgs>): Prisma.PrismaPromise<GetAmphureAggregateType<T>>

    /**
     * Group by Amphure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {amphureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends amphureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: amphureGroupByArgs['orderBy'] }
        : { orderBy?: amphureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, amphureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAmphureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the amphure model
   */
  readonly fields: amphureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for amphure.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__amphureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    province<T extends provinceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, provinceDefaultArgs<ExtArgs>>): Prisma__provinceClient<$Result.GetResult<Prisma.$provincePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tambom<T extends amphure$tambomArgs<ExtArgs> = {}>(args?: Subset<T, amphure$tambomArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tambomPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the amphure model
   */ 
  interface amphureFieldRefs {
    readonly amphures_id: FieldRef<"amphure", 'Int'>
    readonly amphures: FieldRef<"amphure", 'String'>
    readonly provinces_provinces_id: FieldRef<"amphure", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * amphure findUnique
   */
  export type amphureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the amphure
     */
    select?: amphureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: amphureInclude<ExtArgs> | null
    /**
     * Filter, which amphure to fetch.
     */
    where: amphureWhereUniqueInput
  }

  /**
   * amphure findUniqueOrThrow
   */
  export type amphureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the amphure
     */
    select?: amphureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: amphureInclude<ExtArgs> | null
    /**
     * Filter, which amphure to fetch.
     */
    where: amphureWhereUniqueInput
  }

  /**
   * amphure findFirst
   */
  export type amphureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the amphure
     */
    select?: amphureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: amphureInclude<ExtArgs> | null
    /**
     * Filter, which amphure to fetch.
     */
    where?: amphureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of amphures to fetch.
     */
    orderBy?: amphureOrderByWithRelationInput | amphureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for amphures.
     */
    cursor?: amphureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` amphures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` amphures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of amphures.
     */
    distinct?: AmphureScalarFieldEnum | AmphureScalarFieldEnum[]
  }

  /**
   * amphure findFirstOrThrow
   */
  export type amphureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the amphure
     */
    select?: amphureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: amphureInclude<ExtArgs> | null
    /**
     * Filter, which amphure to fetch.
     */
    where?: amphureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of amphures to fetch.
     */
    orderBy?: amphureOrderByWithRelationInput | amphureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for amphures.
     */
    cursor?: amphureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` amphures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` amphures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of amphures.
     */
    distinct?: AmphureScalarFieldEnum | AmphureScalarFieldEnum[]
  }

  /**
   * amphure findMany
   */
  export type amphureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the amphure
     */
    select?: amphureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: amphureInclude<ExtArgs> | null
    /**
     * Filter, which amphures to fetch.
     */
    where?: amphureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of amphures to fetch.
     */
    orderBy?: amphureOrderByWithRelationInput | amphureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing amphures.
     */
    cursor?: amphureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` amphures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` amphures.
     */
    skip?: number
    distinct?: AmphureScalarFieldEnum | AmphureScalarFieldEnum[]
  }

  /**
   * amphure create
   */
  export type amphureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the amphure
     */
    select?: amphureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: amphureInclude<ExtArgs> | null
    /**
     * The data needed to create a amphure.
     */
    data: XOR<amphureCreateInput, amphureUncheckedCreateInput>
  }

  /**
   * amphure createMany
   */
  export type amphureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many amphures.
     */
    data: amphureCreateManyInput | amphureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * amphure update
   */
  export type amphureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the amphure
     */
    select?: amphureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: amphureInclude<ExtArgs> | null
    /**
     * The data needed to update a amphure.
     */
    data: XOR<amphureUpdateInput, amphureUncheckedUpdateInput>
    /**
     * Choose, which amphure to update.
     */
    where: amphureWhereUniqueInput
  }

  /**
   * amphure updateMany
   */
  export type amphureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update amphures.
     */
    data: XOR<amphureUpdateManyMutationInput, amphureUncheckedUpdateManyInput>
    /**
     * Filter which amphures to update
     */
    where?: amphureWhereInput
  }

  /**
   * amphure upsert
   */
  export type amphureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the amphure
     */
    select?: amphureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: amphureInclude<ExtArgs> | null
    /**
     * The filter to search for the amphure to update in case it exists.
     */
    where: amphureWhereUniqueInput
    /**
     * In case the amphure found by the `where` argument doesn't exist, create a new amphure with this data.
     */
    create: XOR<amphureCreateInput, amphureUncheckedCreateInput>
    /**
     * In case the amphure was found with the provided `where` argument, update it with this data.
     */
    update: XOR<amphureUpdateInput, amphureUncheckedUpdateInput>
  }

  /**
   * amphure delete
   */
  export type amphureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the amphure
     */
    select?: amphureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: amphureInclude<ExtArgs> | null
    /**
     * Filter which amphure to delete.
     */
    where: amphureWhereUniqueInput
  }

  /**
   * amphure deleteMany
   */
  export type amphureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which amphures to delete
     */
    where?: amphureWhereInput
  }

  /**
   * amphure.tambom
   */
  export type amphure$tambomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tambom
     */
    select?: tambomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tambomInclude<ExtArgs> | null
    where?: tambomWhereInput
    orderBy?: tambomOrderByWithRelationInput | tambomOrderByWithRelationInput[]
    cursor?: tambomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TambomScalarFieldEnum | TambomScalarFieldEnum[]
  }

  /**
   * amphure without action
   */
  export type amphureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the amphure
     */
    select?: amphureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: amphureInclude<ExtArgs> | null
  }


  /**
   * Model province
   */

  export type AggregateProvince = {
    _count: ProvinceCountAggregateOutputType | null
    _avg: ProvinceAvgAggregateOutputType | null
    _sum: ProvinceSumAggregateOutputType | null
    _min: ProvinceMinAggregateOutputType | null
    _max: ProvinceMaxAggregateOutputType | null
  }

  export type ProvinceAvgAggregateOutputType = {
    provinces_id: number | null
  }

  export type ProvinceSumAggregateOutputType = {
    provinces_id: number | null
  }

  export type ProvinceMinAggregateOutputType = {
    provinces_id: number | null
    provinces: string | null
  }

  export type ProvinceMaxAggregateOutputType = {
    provinces_id: number | null
    provinces: string | null
  }

  export type ProvinceCountAggregateOutputType = {
    provinces_id: number
    provinces: number
    _all: number
  }


  export type ProvinceAvgAggregateInputType = {
    provinces_id?: true
  }

  export type ProvinceSumAggregateInputType = {
    provinces_id?: true
  }

  export type ProvinceMinAggregateInputType = {
    provinces_id?: true
    provinces?: true
  }

  export type ProvinceMaxAggregateInputType = {
    provinces_id?: true
    provinces?: true
  }

  export type ProvinceCountAggregateInputType = {
    provinces_id?: true
    provinces?: true
    _all?: true
  }

  export type ProvinceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which province to aggregate.
     */
    where?: provinceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of provinces to fetch.
     */
    orderBy?: provinceOrderByWithRelationInput | provinceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: provinceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` provinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` provinces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned provinces
    **/
    _count?: true | ProvinceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProvinceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProvinceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProvinceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProvinceMaxAggregateInputType
  }

  export type GetProvinceAggregateType<T extends ProvinceAggregateArgs> = {
        [P in keyof T & keyof AggregateProvince]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProvince[P]>
      : GetScalarType<T[P], AggregateProvince[P]>
  }




  export type provinceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: provinceWhereInput
    orderBy?: provinceOrderByWithAggregationInput | provinceOrderByWithAggregationInput[]
    by: ProvinceScalarFieldEnum[] | ProvinceScalarFieldEnum
    having?: provinceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProvinceCountAggregateInputType | true
    _avg?: ProvinceAvgAggregateInputType
    _sum?: ProvinceSumAggregateInputType
    _min?: ProvinceMinAggregateInputType
    _max?: ProvinceMaxAggregateInputType
  }

  export type ProvinceGroupByOutputType = {
    provinces_id: number
    provinces: string | null
    _count: ProvinceCountAggregateOutputType | null
    _avg: ProvinceAvgAggregateOutputType | null
    _sum: ProvinceSumAggregateOutputType | null
    _min: ProvinceMinAggregateOutputType | null
    _max: ProvinceMaxAggregateOutputType | null
  }

  type GetProvinceGroupByPayload<T extends provinceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProvinceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProvinceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProvinceGroupByOutputType[P]>
            : GetScalarType<T[P], ProvinceGroupByOutputType[P]>
        }
      >
    >


  export type provinceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    provinces_id?: boolean
    provinces?: boolean
    amphure?: boolean | province$amphureArgs<ExtArgs>
    _count?: boolean | ProvinceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["province"]>


  export type provinceSelectScalar = {
    provinces_id?: boolean
    provinces?: boolean
  }

  export type provinceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    amphure?: boolean | province$amphureArgs<ExtArgs>
    _count?: boolean | ProvinceCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $provincePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "province"
    objects: {
      amphure: Prisma.$amphurePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      provinces_id: number
      provinces: string | null
    }, ExtArgs["result"]["province"]>
    composites: {}
  }

  type provinceGetPayload<S extends boolean | null | undefined | provinceDefaultArgs> = $Result.GetResult<Prisma.$provincePayload, S>

  type provinceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<provinceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProvinceCountAggregateInputType | true
    }

  export interface provinceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['province'], meta: { name: 'province' } }
    /**
     * Find zero or one Province that matches the filter.
     * @param {provinceFindUniqueArgs} args - Arguments to find a Province
     * @example
     * // Get one Province
     * const province = await prisma.province.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends provinceFindUniqueArgs>(args: SelectSubset<T, provinceFindUniqueArgs<ExtArgs>>): Prisma__provinceClient<$Result.GetResult<Prisma.$provincePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Province that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {provinceFindUniqueOrThrowArgs} args - Arguments to find a Province
     * @example
     * // Get one Province
     * const province = await prisma.province.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends provinceFindUniqueOrThrowArgs>(args: SelectSubset<T, provinceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__provinceClient<$Result.GetResult<Prisma.$provincePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Province that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {provinceFindFirstArgs} args - Arguments to find a Province
     * @example
     * // Get one Province
     * const province = await prisma.province.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends provinceFindFirstArgs>(args?: SelectSubset<T, provinceFindFirstArgs<ExtArgs>>): Prisma__provinceClient<$Result.GetResult<Prisma.$provincePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Province that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {provinceFindFirstOrThrowArgs} args - Arguments to find a Province
     * @example
     * // Get one Province
     * const province = await prisma.province.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends provinceFindFirstOrThrowArgs>(args?: SelectSubset<T, provinceFindFirstOrThrowArgs<ExtArgs>>): Prisma__provinceClient<$Result.GetResult<Prisma.$provincePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Provinces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {provinceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Provinces
     * const provinces = await prisma.province.findMany()
     * 
     * // Get first 10 Provinces
     * const provinces = await prisma.province.findMany({ take: 10 })
     * 
     * // Only select the `provinces_id`
     * const provinceWithProvinces_idOnly = await prisma.province.findMany({ select: { provinces_id: true } })
     * 
     */
    findMany<T extends provinceFindManyArgs>(args?: SelectSubset<T, provinceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$provincePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Province.
     * @param {provinceCreateArgs} args - Arguments to create a Province.
     * @example
     * // Create one Province
     * const Province = await prisma.province.create({
     *   data: {
     *     // ... data to create a Province
     *   }
     * })
     * 
     */
    create<T extends provinceCreateArgs>(args: SelectSubset<T, provinceCreateArgs<ExtArgs>>): Prisma__provinceClient<$Result.GetResult<Prisma.$provincePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Provinces.
     * @param {provinceCreateManyArgs} args - Arguments to create many Provinces.
     * @example
     * // Create many Provinces
     * const province = await prisma.province.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends provinceCreateManyArgs>(args?: SelectSubset<T, provinceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Province.
     * @param {provinceDeleteArgs} args - Arguments to delete one Province.
     * @example
     * // Delete one Province
     * const Province = await prisma.province.delete({
     *   where: {
     *     // ... filter to delete one Province
     *   }
     * })
     * 
     */
    delete<T extends provinceDeleteArgs>(args: SelectSubset<T, provinceDeleteArgs<ExtArgs>>): Prisma__provinceClient<$Result.GetResult<Prisma.$provincePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Province.
     * @param {provinceUpdateArgs} args - Arguments to update one Province.
     * @example
     * // Update one Province
     * const province = await prisma.province.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends provinceUpdateArgs>(args: SelectSubset<T, provinceUpdateArgs<ExtArgs>>): Prisma__provinceClient<$Result.GetResult<Prisma.$provincePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Provinces.
     * @param {provinceDeleteManyArgs} args - Arguments to filter Provinces to delete.
     * @example
     * // Delete a few Provinces
     * const { count } = await prisma.province.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends provinceDeleteManyArgs>(args?: SelectSubset<T, provinceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Provinces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {provinceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Provinces
     * const province = await prisma.province.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends provinceUpdateManyArgs>(args: SelectSubset<T, provinceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Province.
     * @param {provinceUpsertArgs} args - Arguments to update or create a Province.
     * @example
     * // Update or create a Province
     * const province = await prisma.province.upsert({
     *   create: {
     *     // ... data to create a Province
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Province we want to update
     *   }
     * })
     */
    upsert<T extends provinceUpsertArgs>(args: SelectSubset<T, provinceUpsertArgs<ExtArgs>>): Prisma__provinceClient<$Result.GetResult<Prisma.$provincePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Provinces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {provinceCountArgs} args - Arguments to filter Provinces to count.
     * @example
     * // Count the number of Provinces
     * const count = await prisma.province.count({
     *   where: {
     *     // ... the filter for the Provinces we want to count
     *   }
     * })
    **/
    count<T extends provinceCountArgs>(
      args?: Subset<T, provinceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProvinceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Province.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProvinceAggregateArgs>(args: Subset<T, ProvinceAggregateArgs>): Prisma.PrismaPromise<GetProvinceAggregateType<T>>

    /**
     * Group by Province.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {provinceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends provinceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: provinceGroupByArgs['orderBy'] }
        : { orderBy?: provinceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, provinceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProvinceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the province model
   */
  readonly fields: provinceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for province.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__provinceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    amphure<T extends province$amphureArgs<ExtArgs> = {}>(args?: Subset<T, province$amphureArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$amphurePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the province model
   */ 
  interface provinceFieldRefs {
    readonly provinces_id: FieldRef<"province", 'Int'>
    readonly provinces: FieldRef<"province", 'String'>
  }
    

  // Custom InputTypes
  /**
   * province findUnique
   */
  export type provinceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the province
     */
    select?: provinceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: provinceInclude<ExtArgs> | null
    /**
     * Filter, which province to fetch.
     */
    where: provinceWhereUniqueInput
  }

  /**
   * province findUniqueOrThrow
   */
  export type provinceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the province
     */
    select?: provinceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: provinceInclude<ExtArgs> | null
    /**
     * Filter, which province to fetch.
     */
    where: provinceWhereUniqueInput
  }

  /**
   * province findFirst
   */
  export type provinceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the province
     */
    select?: provinceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: provinceInclude<ExtArgs> | null
    /**
     * Filter, which province to fetch.
     */
    where?: provinceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of provinces to fetch.
     */
    orderBy?: provinceOrderByWithRelationInput | provinceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for provinces.
     */
    cursor?: provinceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` provinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` provinces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of provinces.
     */
    distinct?: ProvinceScalarFieldEnum | ProvinceScalarFieldEnum[]
  }

  /**
   * province findFirstOrThrow
   */
  export type provinceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the province
     */
    select?: provinceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: provinceInclude<ExtArgs> | null
    /**
     * Filter, which province to fetch.
     */
    where?: provinceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of provinces to fetch.
     */
    orderBy?: provinceOrderByWithRelationInput | provinceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for provinces.
     */
    cursor?: provinceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` provinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` provinces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of provinces.
     */
    distinct?: ProvinceScalarFieldEnum | ProvinceScalarFieldEnum[]
  }

  /**
   * province findMany
   */
  export type provinceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the province
     */
    select?: provinceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: provinceInclude<ExtArgs> | null
    /**
     * Filter, which provinces to fetch.
     */
    where?: provinceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of provinces to fetch.
     */
    orderBy?: provinceOrderByWithRelationInput | provinceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing provinces.
     */
    cursor?: provinceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` provinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` provinces.
     */
    skip?: number
    distinct?: ProvinceScalarFieldEnum | ProvinceScalarFieldEnum[]
  }

  /**
   * province create
   */
  export type provinceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the province
     */
    select?: provinceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: provinceInclude<ExtArgs> | null
    /**
     * The data needed to create a province.
     */
    data?: XOR<provinceCreateInput, provinceUncheckedCreateInput>
  }

  /**
   * province createMany
   */
  export type provinceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many provinces.
     */
    data: provinceCreateManyInput | provinceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * province update
   */
  export type provinceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the province
     */
    select?: provinceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: provinceInclude<ExtArgs> | null
    /**
     * The data needed to update a province.
     */
    data: XOR<provinceUpdateInput, provinceUncheckedUpdateInput>
    /**
     * Choose, which province to update.
     */
    where: provinceWhereUniqueInput
  }

  /**
   * province updateMany
   */
  export type provinceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update provinces.
     */
    data: XOR<provinceUpdateManyMutationInput, provinceUncheckedUpdateManyInput>
    /**
     * Filter which provinces to update
     */
    where?: provinceWhereInput
  }

  /**
   * province upsert
   */
  export type provinceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the province
     */
    select?: provinceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: provinceInclude<ExtArgs> | null
    /**
     * The filter to search for the province to update in case it exists.
     */
    where: provinceWhereUniqueInput
    /**
     * In case the province found by the `where` argument doesn't exist, create a new province with this data.
     */
    create: XOR<provinceCreateInput, provinceUncheckedCreateInput>
    /**
     * In case the province was found with the provided `where` argument, update it with this data.
     */
    update: XOR<provinceUpdateInput, provinceUncheckedUpdateInput>
  }

  /**
   * province delete
   */
  export type provinceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the province
     */
    select?: provinceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: provinceInclude<ExtArgs> | null
    /**
     * Filter which province to delete.
     */
    where: provinceWhereUniqueInput
  }

  /**
   * province deleteMany
   */
  export type provinceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which provinces to delete
     */
    where?: provinceWhereInput
  }

  /**
   * province.amphure
   */
  export type province$amphureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the amphure
     */
    select?: amphureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: amphureInclude<ExtArgs> | null
    where?: amphureWhereInput
    orderBy?: amphureOrderByWithRelationInput | amphureOrderByWithRelationInput[]
    cursor?: amphureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AmphureScalarFieldEnum | AmphureScalarFieldEnum[]
  }

  /**
   * province without action
   */
  export type provinceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the province
     */
    select?: provinceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: provinceInclude<ExtArgs> | null
  }


  /**
   * Model tambom
   */

  export type AggregateTambom = {
    _count: TambomCountAggregateOutputType | null
    _avg: TambomAvgAggregateOutputType | null
    _sum: TambomSumAggregateOutputType | null
    _min: TambomMinAggregateOutputType | null
    _max: TambomMaxAggregateOutputType | null
  }

  export type TambomAvgAggregateOutputType = {
    tamboms_id: number | null
    amphures_amphures_id: number | null
  }

  export type TambomSumAggregateOutputType = {
    tamboms_id: number | null
    amphures_amphures_id: number | null
  }

  export type TambomMinAggregateOutputType = {
    tamboms_id: number | null
    tamboms: string | null
    amphures_amphures_id: number | null
  }

  export type TambomMaxAggregateOutputType = {
    tamboms_id: number | null
    tamboms: string | null
    amphures_amphures_id: number | null
  }

  export type TambomCountAggregateOutputType = {
    tamboms_id: number
    tamboms: number
    amphures_amphures_id: number
    _all: number
  }


  export type TambomAvgAggregateInputType = {
    tamboms_id?: true
    amphures_amphures_id?: true
  }

  export type TambomSumAggregateInputType = {
    tamboms_id?: true
    amphures_amphures_id?: true
  }

  export type TambomMinAggregateInputType = {
    tamboms_id?: true
    tamboms?: true
    amphures_amphures_id?: true
  }

  export type TambomMaxAggregateInputType = {
    tamboms_id?: true
    tamboms?: true
    amphures_amphures_id?: true
  }

  export type TambomCountAggregateInputType = {
    tamboms_id?: true
    tamboms?: true
    amphures_amphures_id?: true
    _all?: true
  }

  export type TambomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tambom to aggregate.
     */
    where?: tambomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tamboms to fetch.
     */
    orderBy?: tambomOrderByWithRelationInput | tambomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tambomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tamboms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tamboms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tamboms
    **/
    _count?: true | TambomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TambomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TambomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TambomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TambomMaxAggregateInputType
  }

  export type GetTambomAggregateType<T extends TambomAggregateArgs> = {
        [P in keyof T & keyof AggregateTambom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTambom[P]>
      : GetScalarType<T[P], AggregateTambom[P]>
  }




  export type tambomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tambomWhereInput
    orderBy?: tambomOrderByWithAggregationInput | tambomOrderByWithAggregationInput[]
    by: TambomScalarFieldEnum[] | TambomScalarFieldEnum
    having?: tambomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TambomCountAggregateInputType | true
    _avg?: TambomAvgAggregateInputType
    _sum?: TambomSumAggregateInputType
    _min?: TambomMinAggregateInputType
    _max?: TambomMaxAggregateInputType
  }

  export type TambomGroupByOutputType = {
    tamboms_id: number
    tamboms: string | null
    amphures_amphures_id: number
    _count: TambomCountAggregateOutputType | null
    _avg: TambomAvgAggregateOutputType | null
    _sum: TambomSumAggregateOutputType | null
    _min: TambomMinAggregateOutputType | null
    _max: TambomMaxAggregateOutputType | null
  }

  type GetTambomGroupByPayload<T extends tambomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TambomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TambomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TambomGroupByOutputType[P]>
            : GetScalarType<T[P], TambomGroupByOutputType[P]>
        }
      >
    >


  export type tambomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tamboms_id?: boolean
    tamboms?: boolean
    amphures_amphures_id?: boolean
    patient?: boolean | tambom$patientArgs<ExtArgs>
    amphure?: boolean | amphureDefaultArgs<ExtArgs>
    _count?: boolean | TambomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tambom"]>


  export type tambomSelectScalar = {
    tamboms_id?: boolean
    tamboms?: boolean
    amphures_amphures_id?: boolean
  }

  export type tambomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | tambom$patientArgs<ExtArgs>
    amphure?: boolean | amphureDefaultArgs<ExtArgs>
    _count?: boolean | TambomCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $tambomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tambom"
    objects: {
      patient: Prisma.$patientPayload<ExtArgs>[]
      amphure: Prisma.$amphurePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      tamboms_id: number
      tamboms: string | null
      amphures_amphures_id: number
    }, ExtArgs["result"]["tambom"]>
    composites: {}
  }

  type tambomGetPayload<S extends boolean | null | undefined | tambomDefaultArgs> = $Result.GetResult<Prisma.$tambomPayload, S>

  type tambomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<tambomFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TambomCountAggregateInputType | true
    }

  export interface tambomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tambom'], meta: { name: 'tambom' } }
    /**
     * Find zero or one Tambom that matches the filter.
     * @param {tambomFindUniqueArgs} args - Arguments to find a Tambom
     * @example
     * // Get one Tambom
     * const tambom = await prisma.tambom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tambomFindUniqueArgs>(args: SelectSubset<T, tambomFindUniqueArgs<ExtArgs>>): Prisma__tambomClient<$Result.GetResult<Prisma.$tambomPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tambom that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {tambomFindUniqueOrThrowArgs} args - Arguments to find a Tambom
     * @example
     * // Get one Tambom
     * const tambom = await prisma.tambom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tambomFindUniqueOrThrowArgs>(args: SelectSubset<T, tambomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tambomClient<$Result.GetResult<Prisma.$tambomPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tambom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tambomFindFirstArgs} args - Arguments to find a Tambom
     * @example
     * // Get one Tambom
     * const tambom = await prisma.tambom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tambomFindFirstArgs>(args?: SelectSubset<T, tambomFindFirstArgs<ExtArgs>>): Prisma__tambomClient<$Result.GetResult<Prisma.$tambomPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tambom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tambomFindFirstOrThrowArgs} args - Arguments to find a Tambom
     * @example
     * // Get one Tambom
     * const tambom = await prisma.tambom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tambomFindFirstOrThrowArgs>(args?: SelectSubset<T, tambomFindFirstOrThrowArgs<ExtArgs>>): Prisma__tambomClient<$Result.GetResult<Prisma.$tambomPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tamboms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tambomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tamboms
     * const tamboms = await prisma.tambom.findMany()
     * 
     * // Get first 10 Tamboms
     * const tamboms = await prisma.tambom.findMany({ take: 10 })
     * 
     * // Only select the `tamboms_id`
     * const tambomWithTamboms_idOnly = await prisma.tambom.findMany({ select: { tamboms_id: true } })
     * 
     */
    findMany<T extends tambomFindManyArgs>(args?: SelectSubset<T, tambomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tambomPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tambom.
     * @param {tambomCreateArgs} args - Arguments to create a Tambom.
     * @example
     * // Create one Tambom
     * const Tambom = await prisma.tambom.create({
     *   data: {
     *     // ... data to create a Tambom
     *   }
     * })
     * 
     */
    create<T extends tambomCreateArgs>(args: SelectSubset<T, tambomCreateArgs<ExtArgs>>): Prisma__tambomClient<$Result.GetResult<Prisma.$tambomPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tamboms.
     * @param {tambomCreateManyArgs} args - Arguments to create many Tamboms.
     * @example
     * // Create many Tamboms
     * const tambom = await prisma.tambom.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tambomCreateManyArgs>(args?: SelectSubset<T, tambomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tambom.
     * @param {tambomDeleteArgs} args - Arguments to delete one Tambom.
     * @example
     * // Delete one Tambom
     * const Tambom = await prisma.tambom.delete({
     *   where: {
     *     // ... filter to delete one Tambom
     *   }
     * })
     * 
     */
    delete<T extends tambomDeleteArgs>(args: SelectSubset<T, tambomDeleteArgs<ExtArgs>>): Prisma__tambomClient<$Result.GetResult<Prisma.$tambomPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tambom.
     * @param {tambomUpdateArgs} args - Arguments to update one Tambom.
     * @example
     * // Update one Tambom
     * const tambom = await prisma.tambom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tambomUpdateArgs>(args: SelectSubset<T, tambomUpdateArgs<ExtArgs>>): Prisma__tambomClient<$Result.GetResult<Prisma.$tambomPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tamboms.
     * @param {tambomDeleteManyArgs} args - Arguments to filter Tamboms to delete.
     * @example
     * // Delete a few Tamboms
     * const { count } = await prisma.tambom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tambomDeleteManyArgs>(args?: SelectSubset<T, tambomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tamboms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tambomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tamboms
     * const tambom = await prisma.tambom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tambomUpdateManyArgs>(args: SelectSubset<T, tambomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tambom.
     * @param {tambomUpsertArgs} args - Arguments to update or create a Tambom.
     * @example
     * // Update or create a Tambom
     * const tambom = await prisma.tambom.upsert({
     *   create: {
     *     // ... data to create a Tambom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tambom we want to update
     *   }
     * })
     */
    upsert<T extends tambomUpsertArgs>(args: SelectSubset<T, tambomUpsertArgs<ExtArgs>>): Prisma__tambomClient<$Result.GetResult<Prisma.$tambomPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tamboms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tambomCountArgs} args - Arguments to filter Tamboms to count.
     * @example
     * // Count the number of Tamboms
     * const count = await prisma.tambom.count({
     *   where: {
     *     // ... the filter for the Tamboms we want to count
     *   }
     * })
    **/
    count<T extends tambomCountArgs>(
      args?: Subset<T, tambomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TambomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tambom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TambomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TambomAggregateArgs>(args: Subset<T, TambomAggregateArgs>): Prisma.PrismaPromise<GetTambomAggregateType<T>>

    /**
     * Group by Tambom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tambomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tambomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tambomGroupByArgs['orderBy'] }
        : { orderBy?: tambomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tambomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTambomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tambom model
   */
  readonly fields: tambomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tambom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tambomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends tambom$patientArgs<ExtArgs> = {}>(args?: Subset<T, tambom$patientArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, "findMany"> | Null>
    amphure<T extends amphureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, amphureDefaultArgs<ExtArgs>>): Prisma__amphureClient<$Result.GetResult<Prisma.$amphurePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tambom model
   */ 
  interface tambomFieldRefs {
    readonly tamboms_id: FieldRef<"tambom", 'Int'>
    readonly tamboms: FieldRef<"tambom", 'String'>
    readonly amphures_amphures_id: FieldRef<"tambom", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * tambom findUnique
   */
  export type tambomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tambom
     */
    select?: tambomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tambomInclude<ExtArgs> | null
    /**
     * Filter, which tambom to fetch.
     */
    where: tambomWhereUniqueInput
  }

  /**
   * tambom findUniqueOrThrow
   */
  export type tambomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tambom
     */
    select?: tambomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tambomInclude<ExtArgs> | null
    /**
     * Filter, which tambom to fetch.
     */
    where: tambomWhereUniqueInput
  }

  /**
   * tambom findFirst
   */
  export type tambomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tambom
     */
    select?: tambomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tambomInclude<ExtArgs> | null
    /**
     * Filter, which tambom to fetch.
     */
    where?: tambomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tamboms to fetch.
     */
    orderBy?: tambomOrderByWithRelationInput | tambomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tamboms.
     */
    cursor?: tambomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tamboms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tamboms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tamboms.
     */
    distinct?: TambomScalarFieldEnum | TambomScalarFieldEnum[]
  }

  /**
   * tambom findFirstOrThrow
   */
  export type tambomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tambom
     */
    select?: tambomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tambomInclude<ExtArgs> | null
    /**
     * Filter, which tambom to fetch.
     */
    where?: tambomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tamboms to fetch.
     */
    orderBy?: tambomOrderByWithRelationInput | tambomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tamboms.
     */
    cursor?: tambomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tamboms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tamboms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tamboms.
     */
    distinct?: TambomScalarFieldEnum | TambomScalarFieldEnum[]
  }

  /**
   * tambom findMany
   */
  export type tambomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tambom
     */
    select?: tambomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tambomInclude<ExtArgs> | null
    /**
     * Filter, which tamboms to fetch.
     */
    where?: tambomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tamboms to fetch.
     */
    orderBy?: tambomOrderByWithRelationInput | tambomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tamboms.
     */
    cursor?: tambomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tamboms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tamboms.
     */
    skip?: number
    distinct?: TambomScalarFieldEnum | TambomScalarFieldEnum[]
  }

  /**
   * tambom create
   */
  export type tambomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tambom
     */
    select?: tambomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tambomInclude<ExtArgs> | null
    /**
     * The data needed to create a tambom.
     */
    data: XOR<tambomCreateInput, tambomUncheckedCreateInput>
  }

  /**
   * tambom createMany
   */
  export type tambomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tamboms.
     */
    data: tambomCreateManyInput | tambomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tambom update
   */
  export type tambomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tambom
     */
    select?: tambomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tambomInclude<ExtArgs> | null
    /**
     * The data needed to update a tambom.
     */
    data: XOR<tambomUpdateInput, tambomUncheckedUpdateInput>
    /**
     * Choose, which tambom to update.
     */
    where: tambomWhereUniqueInput
  }

  /**
   * tambom updateMany
   */
  export type tambomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tamboms.
     */
    data: XOR<tambomUpdateManyMutationInput, tambomUncheckedUpdateManyInput>
    /**
     * Filter which tamboms to update
     */
    where?: tambomWhereInput
  }

  /**
   * tambom upsert
   */
  export type tambomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tambom
     */
    select?: tambomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tambomInclude<ExtArgs> | null
    /**
     * The filter to search for the tambom to update in case it exists.
     */
    where: tambomWhereUniqueInput
    /**
     * In case the tambom found by the `where` argument doesn't exist, create a new tambom with this data.
     */
    create: XOR<tambomCreateInput, tambomUncheckedCreateInput>
    /**
     * In case the tambom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tambomUpdateInput, tambomUncheckedUpdateInput>
  }

  /**
   * tambom delete
   */
  export type tambomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tambom
     */
    select?: tambomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tambomInclude<ExtArgs> | null
    /**
     * Filter which tambom to delete.
     */
    where: tambomWhereUniqueInput
  }

  /**
   * tambom deleteMany
   */
  export type tambomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tamboms to delete
     */
    where?: tambomWhereInput
  }

  /**
   * tambom.patient
   */
  export type tambom$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    where?: patientWhereInput
    orderBy?: patientOrderByWithRelationInput | patientOrderByWithRelationInput[]
    cursor?: patientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * tambom without action
   */
  export type tambomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tambom
     */
    select?: tambomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tambomInclude<ExtArgs> | null
  }


  /**
   * Model foot
   */

  export type AggregateFoot = {
    _count: FootCountAggregateOutputType | null
    _avg: FootAvgAggregateOutputType | null
    _sum: FootSumAggregateOutputType | null
    _min: FootMinAggregateOutputType | null
    _max: FootMaxAggregateOutputType | null
  }

  export type FootAvgAggregateOutputType = {
    sensor_foot_id: number | null
    sensor_LR: number | null
    patient_patient_id: number | null
  }

  export type FootSumAggregateOutputType = {
    sensor_foot_id: number | null
    sensor_LR: number | null
    patient_patient_id: number | null
  }

  export type FootMinAggregateOutputType = {
    sensor_foot_id: number | null
    sensor_LR: number | null
    sensors_left: string | null
    sensor_right: string | null
    created_at: Date | null
    updated_at: Date | null
    patient_patient_id: number | null
  }

  export type FootMaxAggregateOutputType = {
    sensor_foot_id: number | null
    sensor_LR: number | null
    sensors_left: string | null
    sensor_right: string | null
    created_at: Date | null
    updated_at: Date | null
    patient_patient_id: number | null
  }

  export type FootCountAggregateOutputType = {
    sensor_foot_id: number
    sensor_LR: number
    sensors_left: number
    sensor_right: number
    created_at: number
    updated_at: number
    patient_patient_id: number
    _all: number
  }


  export type FootAvgAggregateInputType = {
    sensor_foot_id?: true
    sensor_LR?: true
    patient_patient_id?: true
  }

  export type FootSumAggregateInputType = {
    sensor_foot_id?: true
    sensor_LR?: true
    patient_patient_id?: true
  }

  export type FootMinAggregateInputType = {
    sensor_foot_id?: true
    sensor_LR?: true
    sensors_left?: true
    sensor_right?: true
    created_at?: true
    updated_at?: true
    patient_patient_id?: true
  }

  export type FootMaxAggregateInputType = {
    sensor_foot_id?: true
    sensor_LR?: true
    sensors_left?: true
    sensor_right?: true
    created_at?: true
    updated_at?: true
    patient_patient_id?: true
  }

  export type FootCountAggregateInputType = {
    sensor_foot_id?: true
    sensor_LR?: true
    sensors_left?: true
    sensor_right?: true
    created_at?: true
    updated_at?: true
    patient_patient_id?: true
    _all?: true
  }

  export type FootAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which foot to aggregate.
     */
    where?: footWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feet to fetch.
     */
    orderBy?: footOrderByWithRelationInput | footOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: footWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feet from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feet.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned feet
    **/
    _count?: true | FootCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FootAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FootSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FootMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FootMaxAggregateInputType
  }

  export type GetFootAggregateType<T extends FootAggregateArgs> = {
        [P in keyof T & keyof AggregateFoot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoot[P]>
      : GetScalarType<T[P], AggregateFoot[P]>
  }




  export type footGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: footWhereInput
    orderBy?: footOrderByWithAggregationInput | footOrderByWithAggregationInput[]
    by: FootScalarFieldEnum[] | FootScalarFieldEnum
    having?: footScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FootCountAggregateInputType | true
    _avg?: FootAvgAggregateInputType
    _sum?: FootSumAggregateInputType
    _min?: FootMinAggregateInputType
    _max?: FootMaxAggregateInputType
  }

  export type FootGroupByOutputType = {
    sensor_foot_id: number
    sensor_LR: number | null
    sensors_left: string | null
    sensor_right: string | null
    created_at: Date | null
    updated_at: Date | null
    patient_patient_id: number
    _count: FootCountAggregateOutputType | null
    _avg: FootAvgAggregateOutputType | null
    _sum: FootSumAggregateOutputType | null
    _min: FootMinAggregateOutputType | null
    _max: FootMaxAggregateOutputType | null
  }

  type GetFootGroupByPayload<T extends footGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FootGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FootGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FootGroupByOutputType[P]>
            : GetScalarType<T[P], FootGroupByOutputType[P]>
        }
      >
    >


  export type footSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sensor_foot_id?: boolean
    sensor_LR?: boolean
    sensors_left?: boolean
    sensor_right?: boolean
    created_at?: boolean
    updated_at?: boolean
    patient_patient_id?: boolean
    patient?: boolean | patientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foot"]>


  export type footSelectScalar = {
    sensor_foot_id?: boolean
    sensor_LR?: boolean
    sensors_left?: boolean
    sensor_right?: boolean
    created_at?: boolean
    updated_at?: boolean
    patient_patient_id?: boolean
  }

  export type footInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | patientDefaultArgs<ExtArgs>
  }

  export type $footPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "foot"
    objects: {
      patient: Prisma.$patientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      sensor_foot_id: number
      sensor_LR: number | null
      sensors_left: string | null
      sensor_right: string | null
      created_at: Date | null
      updated_at: Date | null
      patient_patient_id: number
    }, ExtArgs["result"]["foot"]>
    composites: {}
  }

  type footGetPayload<S extends boolean | null | undefined | footDefaultArgs> = $Result.GetResult<Prisma.$footPayload, S>

  type footCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<footFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FootCountAggregateInputType | true
    }

  export interface footDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['foot'], meta: { name: 'foot' } }
    /**
     * Find zero or one Foot that matches the filter.
     * @param {footFindUniqueArgs} args - Arguments to find a Foot
     * @example
     * // Get one Foot
     * const foot = await prisma.foot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends footFindUniqueArgs>(args: SelectSubset<T, footFindUniqueArgs<ExtArgs>>): Prisma__footClient<$Result.GetResult<Prisma.$footPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Foot that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {footFindUniqueOrThrowArgs} args - Arguments to find a Foot
     * @example
     * // Get one Foot
     * const foot = await prisma.foot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends footFindUniqueOrThrowArgs>(args: SelectSubset<T, footFindUniqueOrThrowArgs<ExtArgs>>): Prisma__footClient<$Result.GetResult<Prisma.$footPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Foot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {footFindFirstArgs} args - Arguments to find a Foot
     * @example
     * // Get one Foot
     * const foot = await prisma.foot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends footFindFirstArgs>(args?: SelectSubset<T, footFindFirstArgs<ExtArgs>>): Prisma__footClient<$Result.GetResult<Prisma.$footPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Foot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {footFindFirstOrThrowArgs} args - Arguments to find a Foot
     * @example
     * // Get one Foot
     * const foot = await prisma.foot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends footFindFirstOrThrowArgs>(args?: SelectSubset<T, footFindFirstOrThrowArgs<ExtArgs>>): Prisma__footClient<$Result.GetResult<Prisma.$footPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Feet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {footFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feet
     * const feet = await prisma.foot.findMany()
     * 
     * // Get first 10 Feet
     * const feet = await prisma.foot.findMany({ take: 10 })
     * 
     * // Only select the `sensor_foot_id`
     * const footWithSensor_foot_idOnly = await prisma.foot.findMany({ select: { sensor_foot_id: true } })
     * 
     */
    findMany<T extends footFindManyArgs>(args?: SelectSubset<T, footFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$footPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Foot.
     * @param {footCreateArgs} args - Arguments to create a Foot.
     * @example
     * // Create one Foot
     * const Foot = await prisma.foot.create({
     *   data: {
     *     // ... data to create a Foot
     *   }
     * })
     * 
     */
    create<T extends footCreateArgs>(args: SelectSubset<T, footCreateArgs<ExtArgs>>): Prisma__footClient<$Result.GetResult<Prisma.$footPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Feet.
     * @param {footCreateManyArgs} args - Arguments to create many Feet.
     * @example
     * // Create many Feet
     * const foot = await prisma.foot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends footCreateManyArgs>(args?: SelectSubset<T, footCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Foot.
     * @param {footDeleteArgs} args - Arguments to delete one Foot.
     * @example
     * // Delete one Foot
     * const Foot = await prisma.foot.delete({
     *   where: {
     *     // ... filter to delete one Foot
     *   }
     * })
     * 
     */
    delete<T extends footDeleteArgs>(args: SelectSubset<T, footDeleteArgs<ExtArgs>>): Prisma__footClient<$Result.GetResult<Prisma.$footPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Foot.
     * @param {footUpdateArgs} args - Arguments to update one Foot.
     * @example
     * // Update one Foot
     * const foot = await prisma.foot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends footUpdateArgs>(args: SelectSubset<T, footUpdateArgs<ExtArgs>>): Prisma__footClient<$Result.GetResult<Prisma.$footPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Feet.
     * @param {footDeleteManyArgs} args - Arguments to filter Feet to delete.
     * @example
     * // Delete a few Feet
     * const { count } = await prisma.foot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends footDeleteManyArgs>(args?: SelectSubset<T, footDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {footUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feet
     * const foot = await prisma.foot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends footUpdateManyArgs>(args: SelectSubset<T, footUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Foot.
     * @param {footUpsertArgs} args - Arguments to update or create a Foot.
     * @example
     * // Update or create a Foot
     * const foot = await prisma.foot.upsert({
     *   create: {
     *     // ... data to create a Foot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Foot we want to update
     *   }
     * })
     */
    upsert<T extends footUpsertArgs>(args: SelectSubset<T, footUpsertArgs<ExtArgs>>): Prisma__footClient<$Result.GetResult<Prisma.$footPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Feet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {footCountArgs} args - Arguments to filter Feet to count.
     * @example
     * // Count the number of Feet
     * const count = await prisma.foot.count({
     *   where: {
     *     // ... the filter for the Feet we want to count
     *   }
     * })
    **/
    count<T extends footCountArgs>(
      args?: Subset<T, footCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FootCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Foot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FootAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FootAggregateArgs>(args: Subset<T, FootAggregateArgs>): Prisma.PrismaPromise<GetFootAggregateType<T>>

    /**
     * Group by Foot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {footGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends footGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: footGroupByArgs['orderBy'] }
        : { orderBy?: footGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, footGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFootGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the foot model
   */
  readonly fields: footFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for foot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__footClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends patientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, patientDefaultArgs<ExtArgs>>): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the foot model
   */ 
  interface footFieldRefs {
    readonly sensor_foot_id: FieldRef<"foot", 'Int'>
    readonly sensor_LR: FieldRef<"foot", 'Int'>
    readonly sensors_left: FieldRef<"foot", 'String'>
    readonly sensor_right: FieldRef<"foot", 'String'>
    readonly created_at: FieldRef<"foot", 'DateTime'>
    readonly updated_at: FieldRef<"foot", 'DateTime'>
    readonly patient_patient_id: FieldRef<"foot", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * foot findUnique
   */
  export type footFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the foot
     */
    select?: footSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: footInclude<ExtArgs> | null
    /**
     * Filter, which foot to fetch.
     */
    where: footWhereUniqueInput
  }

  /**
   * foot findUniqueOrThrow
   */
  export type footFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the foot
     */
    select?: footSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: footInclude<ExtArgs> | null
    /**
     * Filter, which foot to fetch.
     */
    where: footWhereUniqueInput
  }

  /**
   * foot findFirst
   */
  export type footFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the foot
     */
    select?: footSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: footInclude<ExtArgs> | null
    /**
     * Filter, which foot to fetch.
     */
    where?: footWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feet to fetch.
     */
    orderBy?: footOrderByWithRelationInput | footOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for feet.
     */
    cursor?: footWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feet from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feet.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of feet.
     */
    distinct?: FootScalarFieldEnum | FootScalarFieldEnum[]
  }

  /**
   * foot findFirstOrThrow
   */
  export type footFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the foot
     */
    select?: footSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: footInclude<ExtArgs> | null
    /**
     * Filter, which foot to fetch.
     */
    where?: footWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feet to fetch.
     */
    orderBy?: footOrderByWithRelationInput | footOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for feet.
     */
    cursor?: footWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feet from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feet.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of feet.
     */
    distinct?: FootScalarFieldEnum | FootScalarFieldEnum[]
  }

  /**
   * foot findMany
   */
  export type footFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the foot
     */
    select?: footSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: footInclude<ExtArgs> | null
    /**
     * Filter, which feet to fetch.
     */
    where?: footWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feet to fetch.
     */
    orderBy?: footOrderByWithRelationInput | footOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing feet.
     */
    cursor?: footWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feet from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feet.
     */
    skip?: number
    distinct?: FootScalarFieldEnum | FootScalarFieldEnum[]
  }

  /**
   * foot create
   */
  export type footCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the foot
     */
    select?: footSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: footInclude<ExtArgs> | null
    /**
     * The data needed to create a foot.
     */
    data: XOR<footCreateInput, footUncheckedCreateInput>
  }

  /**
   * foot createMany
   */
  export type footCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many feet.
     */
    data: footCreateManyInput | footCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * foot update
   */
  export type footUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the foot
     */
    select?: footSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: footInclude<ExtArgs> | null
    /**
     * The data needed to update a foot.
     */
    data: XOR<footUpdateInput, footUncheckedUpdateInput>
    /**
     * Choose, which foot to update.
     */
    where: footWhereUniqueInput
  }

  /**
   * foot updateMany
   */
  export type footUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update feet.
     */
    data: XOR<footUpdateManyMutationInput, footUncheckedUpdateManyInput>
    /**
     * Filter which feet to update
     */
    where?: footWhereInput
  }

  /**
   * foot upsert
   */
  export type footUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the foot
     */
    select?: footSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: footInclude<ExtArgs> | null
    /**
     * The filter to search for the foot to update in case it exists.
     */
    where: footWhereUniqueInput
    /**
     * In case the foot found by the `where` argument doesn't exist, create a new foot with this data.
     */
    create: XOR<footCreateInput, footUncheckedCreateInput>
    /**
     * In case the foot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<footUpdateInput, footUncheckedUpdateInput>
  }

  /**
   * foot delete
   */
  export type footDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the foot
     */
    select?: footSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: footInclude<ExtArgs> | null
    /**
     * Filter which foot to delete.
     */
    where: footWhereUniqueInput
  }

  /**
   * foot deleteMany
   */
  export type footDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which feet to delete
     */
    where?: footWhereInput
  }

  /**
   * foot without action
   */
  export type footDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the foot
     */
    select?: footSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: footInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PatientScalarFieldEnum: {
    patient_id: 'patient_id',
    id_card: 'id_card',
    first_name: 'first_name',
    last_name: 'last_name',
    age: 'age',
    gender: 'gender',
    weight: 'weight',
    height: 'height',
    disease: 'disease',
    id_home: 'id_home',
    village_name: 'village_name',
    village_number: 'village_number',
    tel: 'tel',
    email: 'email',
    created_at: 'created_at',
    updated_at: 'updated_at',
    tamboms_tamboms_id: 'tamboms_tamboms_id'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const AmphureScalarFieldEnum: {
    amphures_id: 'amphures_id',
    amphures: 'amphures',
    provinces_provinces_id: 'provinces_provinces_id'
  };

  export type AmphureScalarFieldEnum = (typeof AmphureScalarFieldEnum)[keyof typeof AmphureScalarFieldEnum]


  export const ProvinceScalarFieldEnum: {
    provinces_id: 'provinces_id',
    provinces: 'provinces'
  };

  export type ProvinceScalarFieldEnum = (typeof ProvinceScalarFieldEnum)[keyof typeof ProvinceScalarFieldEnum]


  export const TambomScalarFieldEnum: {
    tamboms_id: 'tamboms_id',
    tamboms: 'tamboms',
    amphures_amphures_id: 'amphures_amphures_id'
  };

  export type TambomScalarFieldEnum = (typeof TambomScalarFieldEnum)[keyof typeof TambomScalarFieldEnum]


  export const FootScalarFieldEnum: {
    sensor_foot_id: 'sensor_foot_id',
    sensor_LR: 'sensor_LR',
    sensors_left: 'sensors_left',
    sensor_right: 'sensor_right',
    created_at: 'created_at',
    updated_at: 'updated_at',
    patient_patient_id: 'patient_patient_id'
  };

  export type FootScalarFieldEnum = (typeof FootScalarFieldEnum)[keyof typeof FootScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type patientWhereInput = {
    AND?: patientWhereInput | patientWhereInput[]
    OR?: patientWhereInput[]
    NOT?: patientWhereInput | patientWhereInput[]
    patient_id?: IntFilter<"patient"> | number
    id_card?: StringNullableFilter<"patient"> | string | null
    first_name?: StringNullableFilter<"patient"> | string | null
    last_name?: StringNullableFilter<"patient"> | string | null
    age?: IntNullableFilter<"patient"> | number | null
    gender?: StringNullableFilter<"patient"> | string | null
    weight?: FloatNullableFilter<"patient"> | number | null
    height?: FloatNullableFilter<"patient"> | number | null
    disease?: StringNullableFilter<"patient"> | string | null
    id_home?: StringNullableFilter<"patient"> | string | null
    village_name?: StringNullableFilter<"patient"> | string | null
    village_number?: StringNullableFilter<"patient"> | string | null
    tel?: StringNullableFilter<"patient"> | string | null
    email?: StringNullableFilter<"patient"> | string | null
    created_at?: DateTimeNullableFilter<"patient"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"patient"> | Date | string | null
    tamboms_tamboms_id?: IntNullableFilter<"patient"> | number | null
    foot?: FootListRelationFilter
    tamboms?: XOR<TambomNullableRelationFilter, tambomWhereInput> | null
  }

  export type patientOrderByWithRelationInput = {
    patient_id?: SortOrder
    id_card?: SortOrderInput | SortOrder
    first_name?: SortOrderInput | SortOrder
    last_name?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    disease?: SortOrderInput | SortOrder
    id_home?: SortOrderInput | SortOrder
    village_name?: SortOrderInput | SortOrder
    village_number?: SortOrderInput | SortOrder
    tel?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    tamboms_tamboms_id?: SortOrderInput | SortOrder
    foot?: footOrderByRelationAggregateInput
    tamboms?: tambomOrderByWithRelationInput
  }

  export type patientWhereUniqueInput = Prisma.AtLeast<{
    patient_id?: number
    AND?: patientWhereInput | patientWhereInput[]
    OR?: patientWhereInput[]
    NOT?: patientWhereInput | patientWhereInput[]
    id_card?: StringNullableFilter<"patient"> | string | null
    first_name?: StringNullableFilter<"patient"> | string | null
    last_name?: StringNullableFilter<"patient"> | string | null
    age?: IntNullableFilter<"patient"> | number | null
    gender?: StringNullableFilter<"patient"> | string | null
    weight?: FloatNullableFilter<"patient"> | number | null
    height?: FloatNullableFilter<"patient"> | number | null
    disease?: StringNullableFilter<"patient"> | string | null
    id_home?: StringNullableFilter<"patient"> | string | null
    village_name?: StringNullableFilter<"patient"> | string | null
    village_number?: StringNullableFilter<"patient"> | string | null
    tel?: StringNullableFilter<"patient"> | string | null
    email?: StringNullableFilter<"patient"> | string | null
    created_at?: DateTimeNullableFilter<"patient"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"patient"> | Date | string | null
    tamboms_tamboms_id?: IntNullableFilter<"patient"> | number | null
    foot?: FootListRelationFilter
    tamboms?: XOR<TambomNullableRelationFilter, tambomWhereInput> | null
  }, "patient_id">

  export type patientOrderByWithAggregationInput = {
    patient_id?: SortOrder
    id_card?: SortOrderInput | SortOrder
    first_name?: SortOrderInput | SortOrder
    last_name?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    disease?: SortOrderInput | SortOrder
    id_home?: SortOrderInput | SortOrder
    village_name?: SortOrderInput | SortOrder
    village_number?: SortOrderInput | SortOrder
    tel?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    tamboms_tamboms_id?: SortOrderInput | SortOrder
    _count?: patientCountOrderByAggregateInput
    _avg?: patientAvgOrderByAggregateInput
    _max?: patientMaxOrderByAggregateInput
    _min?: patientMinOrderByAggregateInput
    _sum?: patientSumOrderByAggregateInput
  }

  export type patientScalarWhereWithAggregatesInput = {
    AND?: patientScalarWhereWithAggregatesInput | patientScalarWhereWithAggregatesInput[]
    OR?: patientScalarWhereWithAggregatesInput[]
    NOT?: patientScalarWhereWithAggregatesInput | patientScalarWhereWithAggregatesInput[]
    patient_id?: IntWithAggregatesFilter<"patient"> | number
    id_card?: StringNullableWithAggregatesFilter<"patient"> | string | null
    first_name?: StringNullableWithAggregatesFilter<"patient"> | string | null
    last_name?: StringNullableWithAggregatesFilter<"patient"> | string | null
    age?: IntNullableWithAggregatesFilter<"patient"> | number | null
    gender?: StringNullableWithAggregatesFilter<"patient"> | string | null
    weight?: FloatNullableWithAggregatesFilter<"patient"> | number | null
    height?: FloatNullableWithAggregatesFilter<"patient"> | number | null
    disease?: StringNullableWithAggregatesFilter<"patient"> | string | null
    id_home?: StringNullableWithAggregatesFilter<"patient"> | string | null
    village_name?: StringNullableWithAggregatesFilter<"patient"> | string | null
    village_number?: StringNullableWithAggregatesFilter<"patient"> | string | null
    tel?: StringNullableWithAggregatesFilter<"patient"> | string | null
    email?: StringNullableWithAggregatesFilter<"patient"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"patient"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"patient"> | Date | string | null
    tamboms_tamboms_id?: IntNullableWithAggregatesFilter<"patient"> | number | null
  }

  export type amphureWhereInput = {
    AND?: amphureWhereInput | amphureWhereInput[]
    OR?: amphureWhereInput[]
    NOT?: amphureWhereInput | amphureWhereInput[]
    amphures_id?: IntFilter<"amphure"> | number
    amphures?: StringNullableFilter<"amphure"> | string | null
    provinces_provinces_id?: IntFilter<"amphure"> | number
    province?: XOR<ProvinceRelationFilter, provinceWhereInput>
    tambom?: TambomListRelationFilter
  }

  export type amphureOrderByWithRelationInput = {
    amphures_id?: SortOrder
    amphures?: SortOrderInput | SortOrder
    provinces_provinces_id?: SortOrder
    province?: provinceOrderByWithRelationInput
    tambom?: tambomOrderByRelationAggregateInput
  }

  export type amphureWhereUniqueInput = Prisma.AtLeast<{
    amphures_id?: number
    AND?: amphureWhereInput | amphureWhereInput[]
    OR?: amphureWhereInput[]
    NOT?: amphureWhereInput | amphureWhereInput[]
    amphures?: StringNullableFilter<"amphure"> | string | null
    provinces_provinces_id?: IntFilter<"amphure"> | number
    province?: XOR<ProvinceRelationFilter, provinceWhereInput>
    tambom?: TambomListRelationFilter
  }, "amphures_id">

  export type amphureOrderByWithAggregationInput = {
    amphures_id?: SortOrder
    amphures?: SortOrderInput | SortOrder
    provinces_provinces_id?: SortOrder
    _count?: amphureCountOrderByAggregateInput
    _avg?: amphureAvgOrderByAggregateInput
    _max?: amphureMaxOrderByAggregateInput
    _min?: amphureMinOrderByAggregateInput
    _sum?: amphureSumOrderByAggregateInput
  }

  export type amphureScalarWhereWithAggregatesInput = {
    AND?: amphureScalarWhereWithAggregatesInput | amphureScalarWhereWithAggregatesInput[]
    OR?: amphureScalarWhereWithAggregatesInput[]
    NOT?: amphureScalarWhereWithAggregatesInput | amphureScalarWhereWithAggregatesInput[]
    amphures_id?: IntWithAggregatesFilter<"amphure"> | number
    amphures?: StringNullableWithAggregatesFilter<"amphure"> | string | null
    provinces_provinces_id?: IntWithAggregatesFilter<"amphure"> | number
  }

  export type provinceWhereInput = {
    AND?: provinceWhereInput | provinceWhereInput[]
    OR?: provinceWhereInput[]
    NOT?: provinceWhereInput | provinceWhereInput[]
    provinces_id?: IntFilter<"province"> | number
    provinces?: StringNullableFilter<"province"> | string | null
    amphure?: AmphureListRelationFilter
  }

  export type provinceOrderByWithRelationInput = {
    provinces_id?: SortOrder
    provinces?: SortOrderInput | SortOrder
    amphure?: amphureOrderByRelationAggregateInput
  }

  export type provinceWhereUniqueInput = Prisma.AtLeast<{
    provinces_id?: number
    AND?: provinceWhereInput | provinceWhereInput[]
    OR?: provinceWhereInput[]
    NOT?: provinceWhereInput | provinceWhereInput[]
    provinces?: StringNullableFilter<"province"> | string | null
    amphure?: AmphureListRelationFilter
  }, "provinces_id">

  export type provinceOrderByWithAggregationInput = {
    provinces_id?: SortOrder
    provinces?: SortOrderInput | SortOrder
    _count?: provinceCountOrderByAggregateInput
    _avg?: provinceAvgOrderByAggregateInput
    _max?: provinceMaxOrderByAggregateInput
    _min?: provinceMinOrderByAggregateInput
    _sum?: provinceSumOrderByAggregateInput
  }

  export type provinceScalarWhereWithAggregatesInput = {
    AND?: provinceScalarWhereWithAggregatesInput | provinceScalarWhereWithAggregatesInput[]
    OR?: provinceScalarWhereWithAggregatesInput[]
    NOT?: provinceScalarWhereWithAggregatesInput | provinceScalarWhereWithAggregatesInput[]
    provinces_id?: IntWithAggregatesFilter<"province"> | number
    provinces?: StringNullableWithAggregatesFilter<"province"> | string | null
  }

  export type tambomWhereInput = {
    AND?: tambomWhereInput | tambomWhereInput[]
    OR?: tambomWhereInput[]
    NOT?: tambomWhereInput | tambomWhereInput[]
    tamboms_id?: IntFilter<"tambom"> | number
    tamboms?: StringNullableFilter<"tambom"> | string | null
    amphures_amphures_id?: IntFilter<"tambom"> | number
    patient?: PatientListRelationFilter
    amphure?: XOR<AmphureRelationFilter, amphureWhereInput>
  }

  export type tambomOrderByWithRelationInput = {
    tamboms_id?: SortOrder
    tamboms?: SortOrderInput | SortOrder
    amphures_amphures_id?: SortOrder
    patient?: patientOrderByRelationAggregateInput
    amphure?: amphureOrderByWithRelationInput
  }

  export type tambomWhereUniqueInput = Prisma.AtLeast<{
    tamboms_id?: number
    AND?: tambomWhereInput | tambomWhereInput[]
    OR?: tambomWhereInput[]
    NOT?: tambomWhereInput | tambomWhereInput[]
    tamboms?: StringNullableFilter<"tambom"> | string | null
    amphures_amphures_id?: IntFilter<"tambom"> | number
    patient?: PatientListRelationFilter
    amphure?: XOR<AmphureRelationFilter, amphureWhereInput>
  }, "tamboms_id">

  export type tambomOrderByWithAggregationInput = {
    tamboms_id?: SortOrder
    tamboms?: SortOrderInput | SortOrder
    amphures_amphures_id?: SortOrder
    _count?: tambomCountOrderByAggregateInput
    _avg?: tambomAvgOrderByAggregateInput
    _max?: tambomMaxOrderByAggregateInput
    _min?: tambomMinOrderByAggregateInput
    _sum?: tambomSumOrderByAggregateInput
  }

  export type tambomScalarWhereWithAggregatesInput = {
    AND?: tambomScalarWhereWithAggregatesInput | tambomScalarWhereWithAggregatesInput[]
    OR?: tambomScalarWhereWithAggregatesInput[]
    NOT?: tambomScalarWhereWithAggregatesInput | tambomScalarWhereWithAggregatesInput[]
    tamboms_id?: IntWithAggregatesFilter<"tambom"> | number
    tamboms?: StringNullableWithAggregatesFilter<"tambom"> | string | null
    amphures_amphures_id?: IntWithAggregatesFilter<"tambom"> | number
  }

  export type footWhereInput = {
    AND?: footWhereInput | footWhereInput[]
    OR?: footWhereInput[]
    NOT?: footWhereInput | footWhereInput[]
    sensor_foot_id?: IntFilter<"foot"> | number
    sensor_LR?: IntNullableFilter<"foot"> | number | null
    sensors_left?: StringNullableFilter<"foot"> | string | null
    sensor_right?: StringNullableFilter<"foot"> | string | null
    created_at?: DateTimeNullableFilter<"foot"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"foot"> | Date | string | null
    patient_patient_id?: IntFilter<"foot"> | number
    patient?: XOR<PatientRelationFilter, patientWhereInput>
  }

  export type footOrderByWithRelationInput = {
    sensor_foot_id?: SortOrder
    sensor_LR?: SortOrderInput | SortOrder
    sensors_left?: SortOrderInput | SortOrder
    sensor_right?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    patient_patient_id?: SortOrder
    patient?: patientOrderByWithRelationInput
  }

  export type footWhereUniqueInput = Prisma.AtLeast<{
    sensor_foot_id?: number
    AND?: footWhereInput | footWhereInput[]
    OR?: footWhereInput[]
    NOT?: footWhereInput | footWhereInput[]
    sensor_LR?: IntNullableFilter<"foot"> | number | null
    sensors_left?: StringNullableFilter<"foot"> | string | null
    sensor_right?: StringNullableFilter<"foot"> | string | null
    created_at?: DateTimeNullableFilter<"foot"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"foot"> | Date | string | null
    patient_patient_id?: IntFilter<"foot"> | number
    patient?: XOR<PatientRelationFilter, patientWhereInput>
  }, "sensor_foot_id">

  export type footOrderByWithAggregationInput = {
    sensor_foot_id?: SortOrder
    sensor_LR?: SortOrderInput | SortOrder
    sensors_left?: SortOrderInput | SortOrder
    sensor_right?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    patient_patient_id?: SortOrder
    _count?: footCountOrderByAggregateInput
    _avg?: footAvgOrderByAggregateInput
    _max?: footMaxOrderByAggregateInput
    _min?: footMinOrderByAggregateInput
    _sum?: footSumOrderByAggregateInput
  }

  export type footScalarWhereWithAggregatesInput = {
    AND?: footScalarWhereWithAggregatesInput | footScalarWhereWithAggregatesInput[]
    OR?: footScalarWhereWithAggregatesInput[]
    NOT?: footScalarWhereWithAggregatesInput | footScalarWhereWithAggregatesInput[]
    sensor_foot_id?: IntWithAggregatesFilter<"foot"> | number
    sensor_LR?: IntNullableWithAggregatesFilter<"foot"> | number | null
    sensors_left?: StringNullableWithAggregatesFilter<"foot"> | string | null
    sensor_right?: StringNullableWithAggregatesFilter<"foot"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"foot"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"foot"> | Date | string | null
    patient_patient_id?: IntWithAggregatesFilter<"foot"> | number
  }

  export type patientCreateInput = {
    id_card?: string | null
    first_name?: string | null
    last_name?: string | null
    age?: number | null
    gender?: string | null
    weight?: number | null
    height?: number | null
    disease?: string | null
    id_home?: string | null
    village_name?: string | null
    village_number?: string | null
    tel?: string | null
    email?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    foot?: footCreateNestedManyWithoutPatientInput
    tamboms?: tambomCreateNestedOneWithoutPatientInput
  }

  export type patientUncheckedCreateInput = {
    patient_id?: number
    id_card?: string | null
    first_name?: string | null
    last_name?: string | null
    age?: number | null
    gender?: string | null
    weight?: number | null
    height?: number | null
    disease?: string | null
    id_home?: string | null
    village_name?: string | null
    village_number?: string | null
    tel?: string | null
    email?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    tamboms_tamboms_id?: number | null
    foot?: footUncheckedCreateNestedManyWithoutPatientInput
  }

  export type patientUpdateInput = {
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    disease?: NullableStringFieldUpdateOperationsInput | string | null
    id_home?: NullableStringFieldUpdateOperationsInput | string | null
    village_name?: NullableStringFieldUpdateOperationsInput | string | null
    village_number?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    foot?: footUpdateManyWithoutPatientNestedInput
    tamboms?: tambomUpdateOneWithoutPatientNestedInput
  }

  export type patientUncheckedUpdateInput = {
    patient_id?: IntFieldUpdateOperationsInput | number
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    disease?: NullableStringFieldUpdateOperationsInput | string | null
    id_home?: NullableStringFieldUpdateOperationsInput | string | null
    village_name?: NullableStringFieldUpdateOperationsInput | string | null
    village_number?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tamboms_tamboms_id?: NullableIntFieldUpdateOperationsInput | number | null
    foot?: footUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type patientCreateManyInput = {
    patient_id?: number
    id_card?: string | null
    first_name?: string | null
    last_name?: string | null
    age?: number | null
    gender?: string | null
    weight?: number | null
    height?: number | null
    disease?: string | null
    id_home?: string | null
    village_name?: string | null
    village_number?: string | null
    tel?: string | null
    email?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    tamboms_tamboms_id?: number | null
  }

  export type patientUpdateManyMutationInput = {
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    disease?: NullableStringFieldUpdateOperationsInput | string | null
    id_home?: NullableStringFieldUpdateOperationsInput | string | null
    village_name?: NullableStringFieldUpdateOperationsInput | string | null
    village_number?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type patientUncheckedUpdateManyInput = {
    patient_id?: IntFieldUpdateOperationsInput | number
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    disease?: NullableStringFieldUpdateOperationsInput | string | null
    id_home?: NullableStringFieldUpdateOperationsInput | string | null
    village_name?: NullableStringFieldUpdateOperationsInput | string | null
    village_number?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tamboms_tamboms_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type amphureCreateInput = {
    amphures?: string | null
    province: provinceCreateNestedOneWithoutAmphureInput
    tambom?: tambomCreateNestedManyWithoutAmphureInput
  }

  export type amphureUncheckedCreateInput = {
    amphures_id?: number
    amphures?: string | null
    provinces_provinces_id: number
    tambom?: tambomUncheckedCreateNestedManyWithoutAmphureInput
  }

  export type amphureUpdateInput = {
    amphures?: NullableStringFieldUpdateOperationsInput | string | null
    province?: provinceUpdateOneRequiredWithoutAmphureNestedInput
    tambom?: tambomUpdateManyWithoutAmphureNestedInput
  }

  export type amphureUncheckedUpdateInput = {
    amphures_id?: IntFieldUpdateOperationsInput | number
    amphures?: NullableStringFieldUpdateOperationsInput | string | null
    provinces_provinces_id?: IntFieldUpdateOperationsInput | number
    tambom?: tambomUncheckedUpdateManyWithoutAmphureNestedInput
  }

  export type amphureCreateManyInput = {
    amphures_id?: number
    amphures?: string | null
    provinces_provinces_id: number
  }

  export type amphureUpdateManyMutationInput = {
    amphures?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type amphureUncheckedUpdateManyInput = {
    amphures_id?: IntFieldUpdateOperationsInput | number
    amphures?: NullableStringFieldUpdateOperationsInput | string | null
    provinces_provinces_id?: IntFieldUpdateOperationsInput | number
  }

  export type provinceCreateInput = {
    provinces?: string | null
    amphure?: amphureCreateNestedManyWithoutProvinceInput
  }

  export type provinceUncheckedCreateInput = {
    provinces_id?: number
    provinces?: string | null
    amphure?: amphureUncheckedCreateNestedManyWithoutProvinceInput
  }

  export type provinceUpdateInput = {
    provinces?: NullableStringFieldUpdateOperationsInput | string | null
    amphure?: amphureUpdateManyWithoutProvinceNestedInput
  }

  export type provinceUncheckedUpdateInput = {
    provinces_id?: IntFieldUpdateOperationsInput | number
    provinces?: NullableStringFieldUpdateOperationsInput | string | null
    amphure?: amphureUncheckedUpdateManyWithoutProvinceNestedInput
  }

  export type provinceCreateManyInput = {
    provinces_id?: number
    provinces?: string | null
  }

  export type provinceUpdateManyMutationInput = {
    provinces?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type provinceUncheckedUpdateManyInput = {
    provinces_id?: IntFieldUpdateOperationsInput | number
    provinces?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tambomCreateInput = {
    tamboms?: string | null
    patient?: patientCreateNestedManyWithoutTambomsInput
    amphure: amphureCreateNestedOneWithoutTambomInput
  }

  export type tambomUncheckedCreateInput = {
    tamboms_id?: number
    tamboms?: string | null
    amphures_amphures_id: number
    patient?: patientUncheckedCreateNestedManyWithoutTambomsInput
  }

  export type tambomUpdateInput = {
    tamboms?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: patientUpdateManyWithoutTambomsNestedInput
    amphure?: amphureUpdateOneRequiredWithoutTambomNestedInput
  }

  export type tambomUncheckedUpdateInput = {
    tamboms_id?: IntFieldUpdateOperationsInput | number
    tamboms?: NullableStringFieldUpdateOperationsInput | string | null
    amphures_amphures_id?: IntFieldUpdateOperationsInput | number
    patient?: patientUncheckedUpdateManyWithoutTambomsNestedInput
  }

  export type tambomCreateManyInput = {
    tamboms_id?: number
    tamboms?: string | null
    amphures_amphures_id: number
  }

  export type tambomUpdateManyMutationInput = {
    tamboms?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tambomUncheckedUpdateManyInput = {
    tamboms_id?: IntFieldUpdateOperationsInput | number
    tamboms?: NullableStringFieldUpdateOperationsInput | string | null
    amphures_amphures_id?: IntFieldUpdateOperationsInput | number
  }

  export type footCreateInput = {
    sensor_LR?: number | null
    sensors_left?: string | null
    sensor_right?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    patient: patientCreateNestedOneWithoutFootInput
  }

  export type footUncheckedCreateInput = {
    sensor_foot_id?: number
    sensor_LR?: number | null
    sensors_left?: string | null
    sensor_right?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    patient_patient_id: number
  }

  export type footUpdateInput = {
    sensor_LR?: NullableIntFieldUpdateOperationsInput | number | null
    sensors_left?: NullableStringFieldUpdateOperationsInput | string | null
    sensor_right?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: patientUpdateOneRequiredWithoutFootNestedInput
  }

  export type footUncheckedUpdateInput = {
    sensor_foot_id?: IntFieldUpdateOperationsInput | number
    sensor_LR?: NullableIntFieldUpdateOperationsInput | number | null
    sensors_left?: NullableStringFieldUpdateOperationsInput | string | null
    sensor_right?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient_patient_id?: IntFieldUpdateOperationsInput | number
  }

  export type footCreateManyInput = {
    sensor_foot_id?: number
    sensor_LR?: number | null
    sensors_left?: string | null
    sensor_right?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    patient_patient_id: number
  }

  export type footUpdateManyMutationInput = {
    sensor_LR?: NullableIntFieldUpdateOperationsInput | number | null
    sensors_left?: NullableStringFieldUpdateOperationsInput | string | null
    sensor_right?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type footUncheckedUpdateManyInput = {
    sensor_foot_id?: IntFieldUpdateOperationsInput | number
    sensor_LR?: NullableIntFieldUpdateOperationsInput | number | null
    sensors_left?: NullableStringFieldUpdateOperationsInput | string | null
    sensor_right?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient_patient_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FootListRelationFilter = {
    every?: footWhereInput
    some?: footWhereInput
    none?: footWhereInput
  }

  export type TambomNullableRelationFilter = {
    is?: tambomWhereInput | null
    isNot?: tambomWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type footOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type patientCountOrderByAggregateInput = {
    patient_id?: SortOrder
    id_card?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    disease?: SortOrder
    id_home?: SortOrder
    village_name?: SortOrder
    village_number?: SortOrder
    tel?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    tamboms_tamboms_id?: SortOrder
  }

  export type patientAvgOrderByAggregateInput = {
    patient_id?: SortOrder
    age?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    tamboms_tamboms_id?: SortOrder
  }

  export type patientMaxOrderByAggregateInput = {
    patient_id?: SortOrder
    id_card?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    disease?: SortOrder
    id_home?: SortOrder
    village_name?: SortOrder
    village_number?: SortOrder
    tel?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    tamboms_tamboms_id?: SortOrder
  }

  export type patientMinOrderByAggregateInput = {
    patient_id?: SortOrder
    id_card?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    disease?: SortOrder
    id_home?: SortOrder
    village_name?: SortOrder
    village_number?: SortOrder
    tel?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    tamboms_tamboms_id?: SortOrder
  }

  export type patientSumOrderByAggregateInput = {
    patient_id?: SortOrder
    age?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    tamboms_tamboms_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ProvinceRelationFilter = {
    is?: provinceWhereInput
    isNot?: provinceWhereInput
  }

  export type TambomListRelationFilter = {
    every?: tambomWhereInput
    some?: tambomWhereInput
    none?: tambomWhereInput
  }

  export type tambomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type amphureCountOrderByAggregateInput = {
    amphures_id?: SortOrder
    amphures?: SortOrder
    provinces_provinces_id?: SortOrder
  }

  export type amphureAvgOrderByAggregateInput = {
    amphures_id?: SortOrder
    provinces_provinces_id?: SortOrder
  }

  export type amphureMaxOrderByAggregateInput = {
    amphures_id?: SortOrder
    amphures?: SortOrder
    provinces_provinces_id?: SortOrder
  }

  export type amphureMinOrderByAggregateInput = {
    amphures_id?: SortOrder
    amphures?: SortOrder
    provinces_provinces_id?: SortOrder
  }

  export type amphureSumOrderByAggregateInput = {
    amphures_id?: SortOrder
    provinces_provinces_id?: SortOrder
  }

  export type AmphureListRelationFilter = {
    every?: amphureWhereInput
    some?: amphureWhereInput
    none?: amphureWhereInput
  }

  export type amphureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type provinceCountOrderByAggregateInput = {
    provinces_id?: SortOrder
    provinces?: SortOrder
  }

  export type provinceAvgOrderByAggregateInput = {
    provinces_id?: SortOrder
  }

  export type provinceMaxOrderByAggregateInput = {
    provinces_id?: SortOrder
    provinces?: SortOrder
  }

  export type provinceMinOrderByAggregateInput = {
    provinces_id?: SortOrder
    provinces?: SortOrder
  }

  export type provinceSumOrderByAggregateInput = {
    provinces_id?: SortOrder
  }

  export type PatientListRelationFilter = {
    every?: patientWhereInput
    some?: patientWhereInput
    none?: patientWhereInput
  }

  export type AmphureRelationFilter = {
    is?: amphureWhereInput
    isNot?: amphureWhereInput
  }

  export type patientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tambomCountOrderByAggregateInput = {
    tamboms_id?: SortOrder
    tamboms?: SortOrder
    amphures_amphures_id?: SortOrder
  }

  export type tambomAvgOrderByAggregateInput = {
    tamboms_id?: SortOrder
    amphures_amphures_id?: SortOrder
  }

  export type tambomMaxOrderByAggregateInput = {
    tamboms_id?: SortOrder
    tamboms?: SortOrder
    amphures_amphures_id?: SortOrder
  }

  export type tambomMinOrderByAggregateInput = {
    tamboms_id?: SortOrder
    tamboms?: SortOrder
    amphures_amphures_id?: SortOrder
  }

  export type tambomSumOrderByAggregateInput = {
    tamboms_id?: SortOrder
    amphures_amphures_id?: SortOrder
  }

  export type PatientRelationFilter = {
    is?: patientWhereInput
    isNot?: patientWhereInput
  }

  export type footCountOrderByAggregateInput = {
    sensor_foot_id?: SortOrder
    sensor_LR?: SortOrder
    sensors_left?: SortOrder
    sensor_right?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    patient_patient_id?: SortOrder
  }

  export type footAvgOrderByAggregateInput = {
    sensor_foot_id?: SortOrder
    sensor_LR?: SortOrder
    patient_patient_id?: SortOrder
  }

  export type footMaxOrderByAggregateInput = {
    sensor_foot_id?: SortOrder
    sensor_LR?: SortOrder
    sensors_left?: SortOrder
    sensor_right?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    patient_patient_id?: SortOrder
  }

  export type footMinOrderByAggregateInput = {
    sensor_foot_id?: SortOrder
    sensor_LR?: SortOrder
    sensors_left?: SortOrder
    sensor_right?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    patient_patient_id?: SortOrder
  }

  export type footSumOrderByAggregateInput = {
    sensor_foot_id?: SortOrder
    sensor_LR?: SortOrder
    patient_patient_id?: SortOrder
  }

  export type footCreateNestedManyWithoutPatientInput = {
    create?: XOR<footCreateWithoutPatientInput, footUncheckedCreateWithoutPatientInput> | footCreateWithoutPatientInput[] | footUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: footCreateOrConnectWithoutPatientInput | footCreateOrConnectWithoutPatientInput[]
    createMany?: footCreateManyPatientInputEnvelope
    connect?: footWhereUniqueInput | footWhereUniqueInput[]
  }

  export type tambomCreateNestedOneWithoutPatientInput = {
    create?: XOR<tambomCreateWithoutPatientInput, tambomUncheckedCreateWithoutPatientInput>
    connectOrCreate?: tambomCreateOrConnectWithoutPatientInput
    connect?: tambomWhereUniqueInput
  }

  export type footUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<footCreateWithoutPatientInput, footUncheckedCreateWithoutPatientInput> | footCreateWithoutPatientInput[] | footUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: footCreateOrConnectWithoutPatientInput | footCreateOrConnectWithoutPatientInput[]
    createMany?: footCreateManyPatientInputEnvelope
    connect?: footWhereUniqueInput | footWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type footUpdateManyWithoutPatientNestedInput = {
    create?: XOR<footCreateWithoutPatientInput, footUncheckedCreateWithoutPatientInput> | footCreateWithoutPatientInput[] | footUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: footCreateOrConnectWithoutPatientInput | footCreateOrConnectWithoutPatientInput[]
    upsert?: footUpsertWithWhereUniqueWithoutPatientInput | footUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: footCreateManyPatientInputEnvelope
    set?: footWhereUniqueInput | footWhereUniqueInput[]
    disconnect?: footWhereUniqueInput | footWhereUniqueInput[]
    delete?: footWhereUniqueInput | footWhereUniqueInput[]
    connect?: footWhereUniqueInput | footWhereUniqueInput[]
    update?: footUpdateWithWhereUniqueWithoutPatientInput | footUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: footUpdateManyWithWhereWithoutPatientInput | footUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: footScalarWhereInput | footScalarWhereInput[]
  }

  export type tambomUpdateOneWithoutPatientNestedInput = {
    create?: XOR<tambomCreateWithoutPatientInput, tambomUncheckedCreateWithoutPatientInput>
    connectOrCreate?: tambomCreateOrConnectWithoutPatientInput
    upsert?: tambomUpsertWithoutPatientInput
    disconnect?: tambomWhereInput | boolean
    delete?: tambomWhereInput | boolean
    connect?: tambomWhereUniqueInput
    update?: XOR<XOR<tambomUpdateToOneWithWhereWithoutPatientInput, tambomUpdateWithoutPatientInput>, tambomUncheckedUpdateWithoutPatientInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type footUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<footCreateWithoutPatientInput, footUncheckedCreateWithoutPatientInput> | footCreateWithoutPatientInput[] | footUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: footCreateOrConnectWithoutPatientInput | footCreateOrConnectWithoutPatientInput[]
    upsert?: footUpsertWithWhereUniqueWithoutPatientInput | footUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: footCreateManyPatientInputEnvelope
    set?: footWhereUniqueInput | footWhereUniqueInput[]
    disconnect?: footWhereUniqueInput | footWhereUniqueInput[]
    delete?: footWhereUniqueInput | footWhereUniqueInput[]
    connect?: footWhereUniqueInput | footWhereUniqueInput[]
    update?: footUpdateWithWhereUniqueWithoutPatientInput | footUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: footUpdateManyWithWhereWithoutPatientInput | footUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: footScalarWhereInput | footScalarWhereInput[]
  }

  export type provinceCreateNestedOneWithoutAmphureInput = {
    create?: XOR<provinceCreateWithoutAmphureInput, provinceUncheckedCreateWithoutAmphureInput>
    connectOrCreate?: provinceCreateOrConnectWithoutAmphureInput
    connect?: provinceWhereUniqueInput
  }

  export type tambomCreateNestedManyWithoutAmphureInput = {
    create?: XOR<tambomCreateWithoutAmphureInput, tambomUncheckedCreateWithoutAmphureInput> | tambomCreateWithoutAmphureInput[] | tambomUncheckedCreateWithoutAmphureInput[]
    connectOrCreate?: tambomCreateOrConnectWithoutAmphureInput | tambomCreateOrConnectWithoutAmphureInput[]
    createMany?: tambomCreateManyAmphureInputEnvelope
    connect?: tambomWhereUniqueInput | tambomWhereUniqueInput[]
  }

  export type tambomUncheckedCreateNestedManyWithoutAmphureInput = {
    create?: XOR<tambomCreateWithoutAmphureInput, tambomUncheckedCreateWithoutAmphureInput> | tambomCreateWithoutAmphureInput[] | tambomUncheckedCreateWithoutAmphureInput[]
    connectOrCreate?: tambomCreateOrConnectWithoutAmphureInput | tambomCreateOrConnectWithoutAmphureInput[]
    createMany?: tambomCreateManyAmphureInputEnvelope
    connect?: tambomWhereUniqueInput | tambomWhereUniqueInput[]
  }

  export type provinceUpdateOneRequiredWithoutAmphureNestedInput = {
    create?: XOR<provinceCreateWithoutAmphureInput, provinceUncheckedCreateWithoutAmphureInput>
    connectOrCreate?: provinceCreateOrConnectWithoutAmphureInput
    upsert?: provinceUpsertWithoutAmphureInput
    connect?: provinceWhereUniqueInput
    update?: XOR<XOR<provinceUpdateToOneWithWhereWithoutAmphureInput, provinceUpdateWithoutAmphureInput>, provinceUncheckedUpdateWithoutAmphureInput>
  }

  export type tambomUpdateManyWithoutAmphureNestedInput = {
    create?: XOR<tambomCreateWithoutAmphureInput, tambomUncheckedCreateWithoutAmphureInput> | tambomCreateWithoutAmphureInput[] | tambomUncheckedCreateWithoutAmphureInput[]
    connectOrCreate?: tambomCreateOrConnectWithoutAmphureInput | tambomCreateOrConnectWithoutAmphureInput[]
    upsert?: tambomUpsertWithWhereUniqueWithoutAmphureInput | tambomUpsertWithWhereUniqueWithoutAmphureInput[]
    createMany?: tambomCreateManyAmphureInputEnvelope
    set?: tambomWhereUniqueInput | tambomWhereUniqueInput[]
    disconnect?: tambomWhereUniqueInput | tambomWhereUniqueInput[]
    delete?: tambomWhereUniqueInput | tambomWhereUniqueInput[]
    connect?: tambomWhereUniqueInput | tambomWhereUniqueInput[]
    update?: tambomUpdateWithWhereUniqueWithoutAmphureInput | tambomUpdateWithWhereUniqueWithoutAmphureInput[]
    updateMany?: tambomUpdateManyWithWhereWithoutAmphureInput | tambomUpdateManyWithWhereWithoutAmphureInput[]
    deleteMany?: tambomScalarWhereInput | tambomScalarWhereInput[]
  }

  export type tambomUncheckedUpdateManyWithoutAmphureNestedInput = {
    create?: XOR<tambomCreateWithoutAmphureInput, tambomUncheckedCreateWithoutAmphureInput> | tambomCreateWithoutAmphureInput[] | tambomUncheckedCreateWithoutAmphureInput[]
    connectOrCreate?: tambomCreateOrConnectWithoutAmphureInput | tambomCreateOrConnectWithoutAmphureInput[]
    upsert?: tambomUpsertWithWhereUniqueWithoutAmphureInput | tambomUpsertWithWhereUniqueWithoutAmphureInput[]
    createMany?: tambomCreateManyAmphureInputEnvelope
    set?: tambomWhereUniqueInput | tambomWhereUniqueInput[]
    disconnect?: tambomWhereUniqueInput | tambomWhereUniqueInput[]
    delete?: tambomWhereUniqueInput | tambomWhereUniqueInput[]
    connect?: tambomWhereUniqueInput | tambomWhereUniqueInput[]
    update?: tambomUpdateWithWhereUniqueWithoutAmphureInput | tambomUpdateWithWhereUniqueWithoutAmphureInput[]
    updateMany?: tambomUpdateManyWithWhereWithoutAmphureInput | tambomUpdateManyWithWhereWithoutAmphureInput[]
    deleteMany?: tambomScalarWhereInput | tambomScalarWhereInput[]
  }

  export type amphureCreateNestedManyWithoutProvinceInput = {
    create?: XOR<amphureCreateWithoutProvinceInput, amphureUncheckedCreateWithoutProvinceInput> | amphureCreateWithoutProvinceInput[] | amphureUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: amphureCreateOrConnectWithoutProvinceInput | amphureCreateOrConnectWithoutProvinceInput[]
    createMany?: amphureCreateManyProvinceInputEnvelope
    connect?: amphureWhereUniqueInput | amphureWhereUniqueInput[]
  }

  export type amphureUncheckedCreateNestedManyWithoutProvinceInput = {
    create?: XOR<amphureCreateWithoutProvinceInput, amphureUncheckedCreateWithoutProvinceInput> | amphureCreateWithoutProvinceInput[] | amphureUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: amphureCreateOrConnectWithoutProvinceInput | amphureCreateOrConnectWithoutProvinceInput[]
    createMany?: amphureCreateManyProvinceInputEnvelope
    connect?: amphureWhereUniqueInput | amphureWhereUniqueInput[]
  }

  export type amphureUpdateManyWithoutProvinceNestedInput = {
    create?: XOR<amphureCreateWithoutProvinceInput, amphureUncheckedCreateWithoutProvinceInput> | amphureCreateWithoutProvinceInput[] | amphureUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: amphureCreateOrConnectWithoutProvinceInput | amphureCreateOrConnectWithoutProvinceInput[]
    upsert?: amphureUpsertWithWhereUniqueWithoutProvinceInput | amphureUpsertWithWhereUniqueWithoutProvinceInput[]
    createMany?: amphureCreateManyProvinceInputEnvelope
    set?: amphureWhereUniqueInput | amphureWhereUniqueInput[]
    disconnect?: amphureWhereUniqueInput | amphureWhereUniqueInput[]
    delete?: amphureWhereUniqueInput | amphureWhereUniqueInput[]
    connect?: amphureWhereUniqueInput | amphureWhereUniqueInput[]
    update?: amphureUpdateWithWhereUniqueWithoutProvinceInput | amphureUpdateWithWhereUniqueWithoutProvinceInput[]
    updateMany?: amphureUpdateManyWithWhereWithoutProvinceInput | amphureUpdateManyWithWhereWithoutProvinceInput[]
    deleteMany?: amphureScalarWhereInput | amphureScalarWhereInput[]
  }

  export type amphureUncheckedUpdateManyWithoutProvinceNestedInput = {
    create?: XOR<amphureCreateWithoutProvinceInput, amphureUncheckedCreateWithoutProvinceInput> | amphureCreateWithoutProvinceInput[] | amphureUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: amphureCreateOrConnectWithoutProvinceInput | amphureCreateOrConnectWithoutProvinceInput[]
    upsert?: amphureUpsertWithWhereUniqueWithoutProvinceInput | amphureUpsertWithWhereUniqueWithoutProvinceInput[]
    createMany?: amphureCreateManyProvinceInputEnvelope
    set?: amphureWhereUniqueInput | amphureWhereUniqueInput[]
    disconnect?: amphureWhereUniqueInput | amphureWhereUniqueInput[]
    delete?: amphureWhereUniqueInput | amphureWhereUniqueInput[]
    connect?: amphureWhereUniqueInput | amphureWhereUniqueInput[]
    update?: amphureUpdateWithWhereUniqueWithoutProvinceInput | amphureUpdateWithWhereUniqueWithoutProvinceInput[]
    updateMany?: amphureUpdateManyWithWhereWithoutProvinceInput | amphureUpdateManyWithWhereWithoutProvinceInput[]
    deleteMany?: amphureScalarWhereInput | amphureScalarWhereInput[]
  }

  export type patientCreateNestedManyWithoutTambomsInput = {
    create?: XOR<patientCreateWithoutTambomsInput, patientUncheckedCreateWithoutTambomsInput> | patientCreateWithoutTambomsInput[] | patientUncheckedCreateWithoutTambomsInput[]
    connectOrCreate?: patientCreateOrConnectWithoutTambomsInput | patientCreateOrConnectWithoutTambomsInput[]
    createMany?: patientCreateManyTambomsInputEnvelope
    connect?: patientWhereUniqueInput | patientWhereUniqueInput[]
  }

  export type amphureCreateNestedOneWithoutTambomInput = {
    create?: XOR<amphureCreateWithoutTambomInput, amphureUncheckedCreateWithoutTambomInput>
    connectOrCreate?: amphureCreateOrConnectWithoutTambomInput
    connect?: amphureWhereUniqueInput
  }

  export type patientUncheckedCreateNestedManyWithoutTambomsInput = {
    create?: XOR<patientCreateWithoutTambomsInput, patientUncheckedCreateWithoutTambomsInput> | patientCreateWithoutTambomsInput[] | patientUncheckedCreateWithoutTambomsInput[]
    connectOrCreate?: patientCreateOrConnectWithoutTambomsInput | patientCreateOrConnectWithoutTambomsInput[]
    createMany?: patientCreateManyTambomsInputEnvelope
    connect?: patientWhereUniqueInput | patientWhereUniqueInput[]
  }

  export type patientUpdateManyWithoutTambomsNestedInput = {
    create?: XOR<patientCreateWithoutTambomsInput, patientUncheckedCreateWithoutTambomsInput> | patientCreateWithoutTambomsInput[] | patientUncheckedCreateWithoutTambomsInput[]
    connectOrCreate?: patientCreateOrConnectWithoutTambomsInput | patientCreateOrConnectWithoutTambomsInput[]
    upsert?: patientUpsertWithWhereUniqueWithoutTambomsInput | patientUpsertWithWhereUniqueWithoutTambomsInput[]
    createMany?: patientCreateManyTambomsInputEnvelope
    set?: patientWhereUniqueInput | patientWhereUniqueInput[]
    disconnect?: patientWhereUniqueInput | patientWhereUniqueInput[]
    delete?: patientWhereUniqueInput | patientWhereUniqueInput[]
    connect?: patientWhereUniqueInput | patientWhereUniqueInput[]
    update?: patientUpdateWithWhereUniqueWithoutTambomsInput | patientUpdateWithWhereUniqueWithoutTambomsInput[]
    updateMany?: patientUpdateManyWithWhereWithoutTambomsInput | patientUpdateManyWithWhereWithoutTambomsInput[]
    deleteMany?: patientScalarWhereInput | patientScalarWhereInput[]
  }

  export type amphureUpdateOneRequiredWithoutTambomNestedInput = {
    create?: XOR<amphureCreateWithoutTambomInput, amphureUncheckedCreateWithoutTambomInput>
    connectOrCreate?: amphureCreateOrConnectWithoutTambomInput
    upsert?: amphureUpsertWithoutTambomInput
    connect?: amphureWhereUniqueInput
    update?: XOR<XOR<amphureUpdateToOneWithWhereWithoutTambomInput, amphureUpdateWithoutTambomInput>, amphureUncheckedUpdateWithoutTambomInput>
  }

  export type patientUncheckedUpdateManyWithoutTambomsNestedInput = {
    create?: XOR<patientCreateWithoutTambomsInput, patientUncheckedCreateWithoutTambomsInput> | patientCreateWithoutTambomsInput[] | patientUncheckedCreateWithoutTambomsInput[]
    connectOrCreate?: patientCreateOrConnectWithoutTambomsInput | patientCreateOrConnectWithoutTambomsInput[]
    upsert?: patientUpsertWithWhereUniqueWithoutTambomsInput | patientUpsertWithWhereUniqueWithoutTambomsInput[]
    createMany?: patientCreateManyTambomsInputEnvelope
    set?: patientWhereUniqueInput | patientWhereUniqueInput[]
    disconnect?: patientWhereUniqueInput | patientWhereUniqueInput[]
    delete?: patientWhereUniqueInput | patientWhereUniqueInput[]
    connect?: patientWhereUniqueInput | patientWhereUniqueInput[]
    update?: patientUpdateWithWhereUniqueWithoutTambomsInput | patientUpdateWithWhereUniqueWithoutTambomsInput[]
    updateMany?: patientUpdateManyWithWhereWithoutTambomsInput | patientUpdateManyWithWhereWithoutTambomsInput[]
    deleteMany?: patientScalarWhereInput | patientScalarWhereInput[]
  }

  export type patientCreateNestedOneWithoutFootInput = {
    create?: XOR<patientCreateWithoutFootInput, patientUncheckedCreateWithoutFootInput>
    connectOrCreate?: patientCreateOrConnectWithoutFootInput
    connect?: patientWhereUniqueInput
  }

  export type patientUpdateOneRequiredWithoutFootNestedInput = {
    create?: XOR<patientCreateWithoutFootInput, patientUncheckedCreateWithoutFootInput>
    connectOrCreate?: patientCreateOrConnectWithoutFootInput
    upsert?: patientUpsertWithoutFootInput
    connect?: patientWhereUniqueInput
    update?: XOR<XOR<patientUpdateToOneWithWhereWithoutFootInput, patientUpdateWithoutFootInput>, patientUncheckedUpdateWithoutFootInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type footCreateWithoutPatientInput = {
    sensor_LR?: number | null
    sensors_left?: string | null
    sensor_right?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type footUncheckedCreateWithoutPatientInput = {
    sensor_foot_id?: number
    sensor_LR?: number | null
    sensors_left?: string | null
    sensor_right?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type footCreateOrConnectWithoutPatientInput = {
    where: footWhereUniqueInput
    create: XOR<footCreateWithoutPatientInput, footUncheckedCreateWithoutPatientInput>
  }

  export type footCreateManyPatientInputEnvelope = {
    data: footCreateManyPatientInput | footCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type tambomCreateWithoutPatientInput = {
    tamboms?: string | null
    amphure: amphureCreateNestedOneWithoutTambomInput
  }

  export type tambomUncheckedCreateWithoutPatientInput = {
    tamboms_id?: number
    tamboms?: string | null
    amphures_amphures_id: number
  }

  export type tambomCreateOrConnectWithoutPatientInput = {
    where: tambomWhereUniqueInput
    create: XOR<tambomCreateWithoutPatientInput, tambomUncheckedCreateWithoutPatientInput>
  }

  export type footUpsertWithWhereUniqueWithoutPatientInput = {
    where: footWhereUniqueInput
    update: XOR<footUpdateWithoutPatientInput, footUncheckedUpdateWithoutPatientInput>
    create: XOR<footCreateWithoutPatientInput, footUncheckedCreateWithoutPatientInput>
  }

  export type footUpdateWithWhereUniqueWithoutPatientInput = {
    where: footWhereUniqueInput
    data: XOR<footUpdateWithoutPatientInput, footUncheckedUpdateWithoutPatientInput>
  }

  export type footUpdateManyWithWhereWithoutPatientInput = {
    where: footScalarWhereInput
    data: XOR<footUpdateManyMutationInput, footUncheckedUpdateManyWithoutPatientInput>
  }

  export type footScalarWhereInput = {
    AND?: footScalarWhereInput | footScalarWhereInput[]
    OR?: footScalarWhereInput[]
    NOT?: footScalarWhereInput | footScalarWhereInput[]
    sensor_foot_id?: IntFilter<"foot"> | number
    sensor_LR?: IntNullableFilter<"foot"> | number | null
    sensors_left?: StringNullableFilter<"foot"> | string | null
    sensor_right?: StringNullableFilter<"foot"> | string | null
    created_at?: DateTimeNullableFilter<"foot"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"foot"> | Date | string | null
    patient_patient_id?: IntFilter<"foot"> | number
  }

  export type tambomUpsertWithoutPatientInput = {
    update: XOR<tambomUpdateWithoutPatientInput, tambomUncheckedUpdateWithoutPatientInput>
    create: XOR<tambomCreateWithoutPatientInput, tambomUncheckedCreateWithoutPatientInput>
    where?: tambomWhereInput
  }

  export type tambomUpdateToOneWithWhereWithoutPatientInput = {
    where?: tambomWhereInput
    data: XOR<tambomUpdateWithoutPatientInput, tambomUncheckedUpdateWithoutPatientInput>
  }

  export type tambomUpdateWithoutPatientInput = {
    tamboms?: NullableStringFieldUpdateOperationsInput | string | null
    amphure?: amphureUpdateOneRequiredWithoutTambomNestedInput
  }

  export type tambomUncheckedUpdateWithoutPatientInput = {
    tamboms_id?: IntFieldUpdateOperationsInput | number
    tamboms?: NullableStringFieldUpdateOperationsInput | string | null
    amphures_amphures_id?: IntFieldUpdateOperationsInput | number
  }

  export type provinceCreateWithoutAmphureInput = {
    provinces?: string | null
  }

  export type provinceUncheckedCreateWithoutAmphureInput = {
    provinces_id?: number
    provinces?: string | null
  }

  export type provinceCreateOrConnectWithoutAmphureInput = {
    where: provinceWhereUniqueInput
    create: XOR<provinceCreateWithoutAmphureInput, provinceUncheckedCreateWithoutAmphureInput>
  }

  export type tambomCreateWithoutAmphureInput = {
    tamboms?: string | null
    patient?: patientCreateNestedManyWithoutTambomsInput
  }

  export type tambomUncheckedCreateWithoutAmphureInput = {
    tamboms_id?: number
    tamboms?: string | null
    patient?: patientUncheckedCreateNestedManyWithoutTambomsInput
  }

  export type tambomCreateOrConnectWithoutAmphureInput = {
    where: tambomWhereUniqueInput
    create: XOR<tambomCreateWithoutAmphureInput, tambomUncheckedCreateWithoutAmphureInput>
  }

  export type tambomCreateManyAmphureInputEnvelope = {
    data: tambomCreateManyAmphureInput | tambomCreateManyAmphureInput[]
    skipDuplicates?: boolean
  }

  export type provinceUpsertWithoutAmphureInput = {
    update: XOR<provinceUpdateWithoutAmphureInput, provinceUncheckedUpdateWithoutAmphureInput>
    create: XOR<provinceCreateWithoutAmphureInput, provinceUncheckedCreateWithoutAmphureInput>
    where?: provinceWhereInput
  }

  export type provinceUpdateToOneWithWhereWithoutAmphureInput = {
    where?: provinceWhereInput
    data: XOR<provinceUpdateWithoutAmphureInput, provinceUncheckedUpdateWithoutAmphureInput>
  }

  export type provinceUpdateWithoutAmphureInput = {
    provinces?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type provinceUncheckedUpdateWithoutAmphureInput = {
    provinces_id?: IntFieldUpdateOperationsInput | number
    provinces?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tambomUpsertWithWhereUniqueWithoutAmphureInput = {
    where: tambomWhereUniqueInput
    update: XOR<tambomUpdateWithoutAmphureInput, tambomUncheckedUpdateWithoutAmphureInput>
    create: XOR<tambomCreateWithoutAmphureInput, tambomUncheckedCreateWithoutAmphureInput>
  }

  export type tambomUpdateWithWhereUniqueWithoutAmphureInput = {
    where: tambomWhereUniqueInput
    data: XOR<tambomUpdateWithoutAmphureInput, tambomUncheckedUpdateWithoutAmphureInput>
  }

  export type tambomUpdateManyWithWhereWithoutAmphureInput = {
    where: tambomScalarWhereInput
    data: XOR<tambomUpdateManyMutationInput, tambomUncheckedUpdateManyWithoutAmphureInput>
  }

  export type tambomScalarWhereInput = {
    AND?: tambomScalarWhereInput | tambomScalarWhereInput[]
    OR?: tambomScalarWhereInput[]
    NOT?: tambomScalarWhereInput | tambomScalarWhereInput[]
    tamboms_id?: IntFilter<"tambom"> | number
    tamboms?: StringNullableFilter<"tambom"> | string | null
    amphures_amphures_id?: IntFilter<"tambom"> | number
  }

  export type amphureCreateWithoutProvinceInput = {
    amphures?: string | null
    tambom?: tambomCreateNestedManyWithoutAmphureInput
  }

  export type amphureUncheckedCreateWithoutProvinceInput = {
    amphures_id?: number
    amphures?: string | null
    tambom?: tambomUncheckedCreateNestedManyWithoutAmphureInput
  }

  export type amphureCreateOrConnectWithoutProvinceInput = {
    where: amphureWhereUniqueInput
    create: XOR<amphureCreateWithoutProvinceInput, amphureUncheckedCreateWithoutProvinceInput>
  }

  export type amphureCreateManyProvinceInputEnvelope = {
    data: amphureCreateManyProvinceInput | amphureCreateManyProvinceInput[]
    skipDuplicates?: boolean
  }

  export type amphureUpsertWithWhereUniqueWithoutProvinceInput = {
    where: amphureWhereUniqueInput
    update: XOR<amphureUpdateWithoutProvinceInput, amphureUncheckedUpdateWithoutProvinceInput>
    create: XOR<amphureCreateWithoutProvinceInput, amphureUncheckedCreateWithoutProvinceInput>
  }

  export type amphureUpdateWithWhereUniqueWithoutProvinceInput = {
    where: amphureWhereUniqueInput
    data: XOR<amphureUpdateWithoutProvinceInput, amphureUncheckedUpdateWithoutProvinceInput>
  }

  export type amphureUpdateManyWithWhereWithoutProvinceInput = {
    where: amphureScalarWhereInput
    data: XOR<amphureUpdateManyMutationInput, amphureUncheckedUpdateManyWithoutProvinceInput>
  }

  export type amphureScalarWhereInput = {
    AND?: amphureScalarWhereInput | amphureScalarWhereInput[]
    OR?: amphureScalarWhereInput[]
    NOT?: amphureScalarWhereInput | amphureScalarWhereInput[]
    amphures_id?: IntFilter<"amphure"> | number
    amphures?: StringNullableFilter<"amphure"> | string | null
    provinces_provinces_id?: IntFilter<"amphure"> | number
  }

  export type patientCreateWithoutTambomsInput = {
    id_card?: string | null
    first_name?: string | null
    last_name?: string | null
    age?: number | null
    gender?: string | null
    weight?: number | null
    height?: number | null
    disease?: string | null
    id_home?: string | null
    village_name?: string | null
    village_number?: string | null
    tel?: string | null
    email?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    foot?: footCreateNestedManyWithoutPatientInput
  }

  export type patientUncheckedCreateWithoutTambomsInput = {
    patient_id?: number
    id_card?: string | null
    first_name?: string | null
    last_name?: string | null
    age?: number | null
    gender?: string | null
    weight?: number | null
    height?: number | null
    disease?: string | null
    id_home?: string | null
    village_name?: string | null
    village_number?: string | null
    tel?: string | null
    email?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    foot?: footUncheckedCreateNestedManyWithoutPatientInput
  }

  export type patientCreateOrConnectWithoutTambomsInput = {
    where: patientWhereUniqueInput
    create: XOR<patientCreateWithoutTambomsInput, patientUncheckedCreateWithoutTambomsInput>
  }

  export type patientCreateManyTambomsInputEnvelope = {
    data: patientCreateManyTambomsInput | patientCreateManyTambomsInput[]
    skipDuplicates?: boolean
  }

  export type amphureCreateWithoutTambomInput = {
    amphures?: string | null
    province: provinceCreateNestedOneWithoutAmphureInput
  }

  export type amphureUncheckedCreateWithoutTambomInput = {
    amphures_id?: number
    amphures?: string | null
    provinces_provinces_id: number
  }

  export type amphureCreateOrConnectWithoutTambomInput = {
    where: amphureWhereUniqueInput
    create: XOR<amphureCreateWithoutTambomInput, amphureUncheckedCreateWithoutTambomInput>
  }

  export type patientUpsertWithWhereUniqueWithoutTambomsInput = {
    where: patientWhereUniqueInput
    update: XOR<patientUpdateWithoutTambomsInput, patientUncheckedUpdateWithoutTambomsInput>
    create: XOR<patientCreateWithoutTambomsInput, patientUncheckedCreateWithoutTambomsInput>
  }

  export type patientUpdateWithWhereUniqueWithoutTambomsInput = {
    where: patientWhereUniqueInput
    data: XOR<patientUpdateWithoutTambomsInput, patientUncheckedUpdateWithoutTambomsInput>
  }

  export type patientUpdateManyWithWhereWithoutTambomsInput = {
    where: patientScalarWhereInput
    data: XOR<patientUpdateManyMutationInput, patientUncheckedUpdateManyWithoutTambomsInput>
  }

  export type patientScalarWhereInput = {
    AND?: patientScalarWhereInput | patientScalarWhereInput[]
    OR?: patientScalarWhereInput[]
    NOT?: patientScalarWhereInput | patientScalarWhereInput[]
    patient_id?: IntFilter<"patient"> | number
    id_card?: StringNullableFilter<"patient"> | string | null
    first_name?: StringNullableFilter<"patient"> | string | null
    last_name?: StringNullableFilter<"patient"> | string | null
    age?: IntNullableFilter<"patient"> | number | null
    gender?: StringNullableFilter<"patient"> | string | null
    weight?: FloatNullableFilter<"patient"> | number | null
    height?: FloatNullableFilter<"patient"> | number | null
    disease?: StringNullableFilter<"patient"> | string | null
    id_home?: StringNullableFilter<"patient"> | string | null
    village_name?: StringNullableFilter<"patient"> | string | null
    village_number?: StringNullableFilter<"patient"> | string | null
    tel?: StringNullableFilter<"patient"> | string | null
    email?: StringNullableFilter<"patient"> | string | null
    created_at?: DateTimeNullableFilter<"patient"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"patient"> | Date | string | null
    tamboms_tamboms_id?: IntNullableFilter<"patient"> | number | null
  }

  export type amphureUpsertWithoutTambomInput = {
    update: XOR<amphureUpdateWithoutTambomInput, amphureUncheckedUpdateWithoutTambomInput>
    create: XOR<amphureCreateWithoutTambomInput, amphureUncheckedCreateWithoutTambomInput>
    where?: amphureWhereInput
  }

  export type amphureUpdateToOneWithWhereWithoutTambomInput = {
    where?: amphureWhereInput
    data: XOR<amphureUpdateWithoutTambomInput, amphureUncheckedUpdateWithoutTambomInput>
  }

  export type amphureUpdateWithoutTambomInput = {
    amphures?: NullableStringFieldUpdateOperationsInput | string | null
    province?: provinceUpdateOneRequiredWithoutAmphureNestedInput
  }

  export type amphureUncheckedUpdateWithoutTambomInput = {
    amphures_id?: IntFieldUpdateOperationsInput | number
    amphures?: NullableStringFieldUpdateOperationsInput | string | null
    provinces_provinces_id?: IntFieldUpdateOperationsInput | number
  }

  export type patientCreateWithoutFootInput = {
    id_card?: string | null
    first_name?: string | null
    last_name?: string | null
    age?: number | null
    gender?: string | null
    weight?: number | null
    height?: number | null
    disease?: string | null
    id_home?: string | null
    village_name?: string | null
    village_number?: string | null
    tel?: string | null
    email?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    tamboms?: tambomCreateNestedOneWithoutPatientInput
  }

  export type patientUncheckedCreateWithoutFootInput = {
    patient_id?: number
    id_card?: string | null
    first_name?: string | null
    last_name?: string | null
    age?: number | null
    gender?: string | null
    weight?: number | null
    height?: number | null
    disease?: string | null
    id_home?: string | null
    village_name?: string | null
    village_number?: string | null
    tel?: string | null
    email?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    tamboms_tamboms_id?: number | null
  }

  export type patientCreateOrConnectWithoutFootInput = {
    where: patientWhereUniqueInput
    create: XOR<patientCreateWithoutFootInput, patientUncheckedCreateWithoutFootInput>
  }

  export type patientUpsertWithoutFootInput = {
    update: XOR<patientUpdateWithoutFootInput, patientUncheckedUpdateWithoutFootInput>
    create: XOR<patientCreateWithoutFootInput, patientUncheckedCreateWithoutFootInput>
    where?: patientWhereInput
  }

  export type patientUpdateToOneWithWhereWithoutFootInput = {
    where?: patientWhereInput
    data: XOR<patientUpdateWithoutFootInput, patientUncheckedUpdateWithoutFootInput>
  }

  export type patientUpdateWithoutFootInput = {
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    disease?: NullableStringFieldUpdateOperationsInput | string | null
    id_home?: NullableStringFieldUpdateOperationsInput | string | null
    village_name?: NullableStringFieldUpdateOperationsInput | string | null
    village_number?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tamboms?: tambomUpdateOneWithoutPatientNestedInput
  }

  export type patientUncheckedUpdateWithoutFootInput = {
    patient_id?: IntFieldUpdateOperationsInput | number
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    disease?: NullableStringFieldUpdateOperationsInput | string | null
    id_home?: NullableStringFieldUpdateOperationsInput | string | null
    village_name?: NullableStringFieldUpdateOperationsInput | string | null
    village_number?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tamboms_tamboms_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type footCreateManyPatientInput = {
    sensor_foot_id?: number
    sensor_LR?: number | null
    sensors_left?: string | null
    sensor_right?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type footUpdateWithoutPatientInput = {
    sensor_LR?: NullableIntFieldUpdateOperationsInput | number | null
    sensors_left?: NullableStringFieldUpdateOperationsInput | string | null
    sensor_right?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type footUncheckedUpdateWithoutPatientInput = {
    sensor_foot_id?: IntFieldUpdateOperationsInput | number
    sensor_LR?: NullableIntFieldUpdateOperationsInput | number | null
    sensors_left?: NullableStringFieldUpdateOperationsInput | string | null
    sensor_right?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type footUncheckedUpdateManyWithoutPatientInput = {
    sensor_foot_id?: IntFieldUpdateOperationsInput | number
    sensor_LR?: NullableIntFieldUpdateOperationsInput | number | null
    sensors_left?: NullableStringFieldUpdateOperationsInput | string | null
    sensor_right?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tambomCreateManyAmphureInput = {
    tamboms_id?: number
    tamboms?: string | null
  }

  export type tambomUpdateWithoutAmphureInput = {
    tamboms?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: patientUpdateManyWithoutTambomsNestedInput
  }

  export type tambomUncheckedUpdateWithoutAmphureInput = {
    tamboms_id?: IntFieldUpdateOperationsInput | number
    tamboms?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: patientUncheckedUpdateManyWithoutTambomsNestedInput
  }

  export type tambomUncheckedUpdateManyWithoutAmphureInput = {
    tamboms_id?: IntFieldUpdateOperationsInput | number
    tamboms?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type amphureCreateManyProvinceInput = {
    amphures_id?: number
    amphures?: string | null
  }

  export type amphureUpdateWithoutProvinceInput = {
    amphures?: NullableStringFieldUpdateOperationsInput | string | null
    tambom?: tambomUpdateManyWithoutAmphureNestedInput
  }

  export type amphureUncheckedUpdateWithoutProvinceInput = {
    amphures_id?: IntFieldUpdateOperationsInput | number
    amphures?: NullableStringFieldUpdateOperationsInput | string | null
    tambom?: tambomUncheckedUpdateManyWithoutAmphureNestedInput
  }

  export type amphureUncheckedUpdateManyWithoutProvinceInput = {
    amphures_id?: IntFieldUpdateOperationsInput | number
    amphures?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type patientCreateManyTambomsInput = {
    patient_id?: number
    id_card?: string | null
    first_name?: string | null
    last_name?: string | null
    age?: number | null
    gender?: string | null
    weight?: number | null
    height?: number | null
    disease?: string | null
    id_home?: string | null
    village_name?: string | null
    village_number?: string | null
    tel?: string | null
    email?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type patientUpdateWithoutTambomsInput = {
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    disease?: NullableStringFieldUpdateOperationsInput | string | null
    id_home?: NullableStringFieldUpdateOperationsInput | string | null
    village_name?: NullableStringFieldUpdateOperationsInput | string | null
    village_number?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    foot?: footUpdateManyWithoutPatientNestedInput
  }

  export type patientUncheckedUpdateWithoutTambomsInput = {
    patient_id?: IntFieldUpdateOperationsInput | number
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    disease?: NullableStringFieldUpdateOperationsInput | string | null
    id_home?: NullableStringFieldUpdateOperationsInput | string | null
    village_name?: NullableStringFieldUpdateOperationsInput | string | null
    village_number?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    foot?: footUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type patientUncheckedUpdateManyWithoutTambomsInput = {
    patient_id?: IntFieldUpdateOperationsInput | number
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    disease?: NullableStringFieldUpdateOperationsInput | string | null
    id_home?: NullableStringFieldUpdateOperationsInput | string | null
    village_name?: NullableStringFieldUpdateOperationsInput | string | null
    village_number?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PatientCountOutputTypeDefaultArgs instead
     */
    export type PatientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AmphureCountOutputTypeDefaultArgs instead
     */
    export type AmphureCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AmphureCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProvinceCountOutputTypeDefaultArgs instead
     */
    export type ProvinceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProvinceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TambomCountOutputTypeDefaultArgs instead
     */
    export type TambomCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TambomCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use patientDefaultArgs instead
     */
    export type patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = patientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use amphureDefaultArgs instead
     */
    export type amphureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = amphureDefaultArgs<ExtArgs>
    /**
     * @deprecated Use provinceDefaultArgs instead
     */
    export type provinceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = provinceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use tambomDefaultArgs instead
     */
    export type tambomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = tambomDefaultArgs<ExtArgs>
    /**
     * @deprecated Use footDefaultArgs instead
     */
    export type footArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = footDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}